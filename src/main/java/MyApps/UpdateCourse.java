/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyApps;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import MyLibs.Course;
import MyLibs.CourseDAO;
import MyLibs.Role;
import MyLibs.User;
import MyLibs.UserDAO;

/**
 *
 * @author allen
 */
public class UpdateCourse extends javax.swing.JFrame {

    private ArrayList<Integer> teachersToAdd = new ArrayList<>();
    private ArrayList<Integer> teachersToRemove = new ArrayList<>();
    private ArrayList<Integer> studentsToAdd = new ArrayList<>();
    private ArrayList<Integer> studentsToRemove = new ArrayList<>();
    private ArrayList<String> roomsToAdd = new ArrayList<>();
    private ArrayList<String> roomsToRemove = new ArrayList<>();
    private Course courseToUpdate;
    
    /**
     * Creates new form UpdateTeacher
     */
    public UpdateCourse() {
        initComponents();
        this.courseToUpdate = null;
        jLabel1.setText("Create Course");
    }

    public UpdateCourse(Course course) {
        initComponents();
        this.courseToUpdate = course;
        jLabel1.setText("Update Course");
        populateFields(course);
        populateAssignedTeachersTable(course);
        populateEnrolledStudentsTable(course);
        populateRoomsTable(course);
    }



    private void populateEnrolledStudentsTable(Course course) {
        if (course == null) return;

        DefaultTableModel model = (DefaultTableModel) enrolledStudentsTable.getModel();
        model.setRowCount(0);

        CourseDAO courseDAO;
        try {
            courseDAO = new CourseDAO();
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
        ArrayList<User> enrolledStudents = courseDAO.findStudentsByCourseId(course.getCourseId());
        for (User student : enrolledStudents) {
            model.addRow(new Object[]{student.getUserID(), student.getName(), student.getEmail()});
        }
    }

    private void populateAssignedTeachersTable(Course course) {
        if (course == null) return;

        DefaultTableModel model = (DefaultTableModel) assignedTeachersTable.getModel();
        model.setRowCount(0);

        CourseDAO courseDAO;
        try {
            courseDAO = new CourseDAO();
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
        ArrayList<User> assignedTeachers = courseDAO.findTeachersByCourseId(course.getCourseId());
        for (User teacher : assignedTeachers) {
            model.addRow(new Object[]{teacher.getUserID(), teacher.getName(), teacher.getEmail()});
        }
    }

    private void populateRoomsTable(Course course) {
        if (course == null) return;

        DefaultTableModel model = (DefaultTableModel) roomsTable.getModel();
        model.setRowCount(0);

        CourseDAO courseDAO;
        try {
            courseDAO = new CourseDAO();
            List<String> rooms = courseDAO.getRoomsByCourseId(course.getCourseId());
            for (String room : rooms) {
                model.addRow(new Object[]{room});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void populateFields(Course course) {
        courseCodeField.setText(course.getCourseCode());
        courseTitleField.setText(course.getCourseTitle());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        courseCodeField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        courseTitleField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        assignedTeachersTable = new javax.swing.JTable();
        enrollAStudentButton = new javax.swing.JPanel();
        enrollAStudentText = new javax.swing.JLabel();
        unenrollAStudentButton = new javax.swing.JPanel();
        unenrollAStudent = new javax.swing.JLabel();
        saveButton = new javax.swing.JPanel();
        saveText = new javax.swing.JLabel();
        cancelButton = new javax.swing.JPanel();
        cancelText = new javax.swing.JLabel();
        assignATeacherButton = new javax.swing.JPanel();
        assignATeacherText = new javax.swing.JLabel();
        unassignATeacherButton = new javax.swing.JPanel();
        unassignATeacherText = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        enrolledStudentsTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        roomsTable = new javax.swing.JTable();
        addARoomButton = new javax.swing.JPanel();
        addARoom = new javax.swing.JLabel();
        removeARoomButton = new javax.swing.JPanel();
        removeARoom = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 900));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(249, 249, 249));

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(67, 67, 67));
        jLabel1.setText("Course Editor");

        jLabel2.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(67, 67, 67));
        jLabel2.setText("Course Code");

        courseCodeField.setBackground(new java.awt.Color(255, 255, 255));
        courseCodeField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        courseCodeField.setForeground(new java.awt.Color(67, 67, 67));
        courseCodeField.setBorder(null);
        courseCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCodeFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(67, 67, 67));
        jLabel5.setText("Course Title");

        courseTitleField.setBackground(new java.awt.Color(255, 255, 255));
        courseTitleField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        courseTitleField.setForeground(new java.awt.Color(67, 67, 67));
        courseTitleField.setBorder(null);
        courseTitleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseTitleFieldActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(67, 67, 67));
        jLabel7.setText("Assigned Teachers");

        assignedTeachersTable.setBackground(new java.awt.Color(255, 255, 255));
        assignedTeachersTable.setForeground(new java.awt.Color(0, 0, 0));
        assignedTeachersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Teacher ID", "Name", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(assignedTeachersTable);

        enrollAStudentButton.setBackground(new java.awt.Color(49, 53, 110));
        enrollAStudentButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        enrollAStudentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                enrollAStudentButtonMouseReleased(evt);
            }
        });

        enrollAStudentText.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        enrollAStudentText.setForeground(new java.awt.Color(255, 255, 255));
        enrollAStudentText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enrollAStudentText.setText("Enroll a Student");

        javax.swing.GroupLayout enrollAStudentButtonLayout = new javax.swing.GroupLayout(enrollAStudentButton);
        enrollAStudentButton.setLayout(enrollAStudentButtonLayout);
        enrollAStudentButtonLayout.setHorizontalGroup(
            enrollAStudentButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, enrollAStudentButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enrollAStudentText, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );
        enrollAStudentButtonLayout.setVerticalGroup(
            enrollAStudentButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(enrollAStudentText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
        );

        unenrollAStudentButton.setBackground(new java.awt.Color(194, 130, 130));
        unenrollAStudentButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        unenrollAStudentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                unenrollAStudentButtonMouseReleased(evt);
            }
        });

        unenrollAStudent.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        unenrollAStudent.setForeground(new java.awt.Color(255, 255, 255));
        unenrollAStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unenrollAStudent.setText("Unenroll a Student");

        javax.swing.GroupLayout unenrollAStudentButtonLayout = new javax.swing.GroupLayout(unenrollAStudentButton);
        unenrollAStudentButton.setLayout(unenrollAStudentButtonLayout);
        unenrollAStudentButtonLayout.setHorizontalGroup(
            unenrollAStudentButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unenrollAStudentButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unenrollAStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        unenrollAStudentButtonLayout.setVerticalGroup(
            unenrollAStudentButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(unenrollAStudent, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );

        saveButton.setBackground(new java.awt.Color(101, 139, 112));
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveButtonMouseReleased(evt);
            }
        });

        saveText.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        saveText.setForeground(new java.awt.Color(255, 255, 255));
        saveText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveText.setText("Save");

        javax.swing.GroupLayout saveButtonLayout = new javax.swing.GroupLayout(saveButton);
        saveButton.setLayout(saveButtonLayout);
        saveButtonLayout.setHorizontalGroup(
            saveButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        saveButtonLayout.setVerticalGroup(
            saveButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saveText, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        cancelButton.setBackground(new java.awt.Color(194, 130, 130));
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cancelButtonMouseReleased(evt);
            }
        });

        cancelText.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        cancelText.setForeground(new java.awt.Color(255, 255, 255));
        cancelText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancelText.setText("Cancel");

        javax.swing.GroupLayout cancelButtonLayout = new javax.swing.GroupLayout(cancelButton);
        cancelButton.setLayout(cancelButtonLayout);
        cancelButtonLayout.setHorizontalGroup(
            cancelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cancelButtonLayout.setVerticalGroup(
            cancelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cancelText, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        assignATeacherButton.setBackground(new java.awt.Color(49, 53, 110));
        assignATeacherButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        assignATeacherButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                assignATeacherButtonMouseReleased(evt);
            }
        });

        assignATeacherText.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        assignATeacherText.setForeground(new java.awt.Color(255, 255, 255));
        assignATeacherText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        assignATeacherText.setText("Assign a Teacher");

        javax.swing.GroupLayout assignATeacherButtonLayout = new javax.swing.GroupLayout(assignATeacherButton);
        assignATeacherButton.setLayout(assignATeacherButtonLayout);
        assignATeacherButtonLayout.setHorizontalGroup(
            assignATeacherButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignATeacherButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assignATeacherText, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );
        assignATeacherButtonLayout.setVerticalGroup(
            assignATeacherButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(assignATeacherText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
        );

        unassignATeacherButton.setBackground(new java.awt.Color(194, 130, 130));
        unassignATeacherButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        unassignATeacherButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                unassignATeacherButtonMouseReleased(evt);
            }
        });

        unassignATeacherText.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        unassignATeacherText.setForeground(new java.awt.Color(255, 255, 255));
        unassignATeacherText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unassignATeacherText.setText("Unassign a Teacher");

        javax.swing.GroupLayout unassignATeacherButtonLayout = new javax.swing.GroupLayout(unassignATeacherButton);
        unassignATeacherButton.setLayout(unassignATeacherButtonLayout);
        unassignATeacherButtonLayout.setHorizontalGroup(
            unassignATeacherButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unassignATeacherButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unassignATeacherText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        unassignATeacherButtonLayout.setVerticalGroup(
            unassignATeacherButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(unassignATeacherText, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
        );

        jLabel8.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(67, 67, 67));
        jLabel8.setText("Enrolled Students");

        enrolledStudentsTable.setBackground(new java.awt.Color(255, 255, 255));
        enrolledStudentsTable.setForeground(new java.awt.Color(0, 0, 0));
        enrolledStudentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(enrolledStudentsTable);
        if (enrolledStudentsTable.getColumnModel().getColumnCount() > 0) {
            enrolledStudentsTable.getColumnModel().getColumn(1).setHeaderValue("Name");
            enrolledStudentsTable.getColumnModel().getColumn(2).setHeaderValue("Email");
        }

        jLabel9.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(67, 67, 67));
        jLabel9.setText("Assigned Rooms");

        roomsTable.setBackground(new java.awt.Color(255, 255, 255));
        roomsTable.setForeground(new java.awt.Color(0, 0, 0));
        roomsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Room Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(roomsTable);

        addARoomButton.setBackground(new java.awt.Color(49, 53, 110));
        addARoomButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addARoomButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addARoomButtonMouseReleased(evt);
            }
        });

        addARoom.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        addARoom.setForeground(new java.awt.Color(255, 255, 255));
        addARoom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addARoom.setText("Add a Room");

        javax.swing.GroupLayout addARoomButtonLayout = new javax.swing.GroupLayout(addARoomButton);
        addARoomButton.setLayout(addARoomButtonLayout);
        addARoomButtonLayout.setHorizontalGroup(
            addARoomButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addARoomButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addARoom, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );
        addARoomButtonLayout.setVerticalGroup(
            addARoomButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addARoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
        );

        removeARoomButton.setBackground(new java.awt.Color(194, 130, 130));
        removeARoomButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeARoomButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removeARoomButtonMouseReleased(evt);
            }
        });

        removeARoom.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        removeARoom.setForeground(new java.awt.Color(255, 255, 255));
        removeARoom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeARoom.setText("Remove a Room");

        javax.swing.GroupLayout removeARoomButtonLayout = new javax.swing.GroupLayout(removeARoomButton);
        removeARoomButton.setLayout(removeARoomButtonLayout);
        removeARoomButtonLayout.setHorizontalGroup(
            removeARoomButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeARoomButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeARoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        removeARoomButtonLayout.setVerticalGroup(
            removeARoomButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(removeARoom, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(courseTitleField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(assignATeacherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unassignATeacherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(319, 319, 319)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(unenrollAStudentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enrollAStudentButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addARoomButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeARoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(assignATeacherButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unassignATeacherButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(enrollAStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unenrollAStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addARoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeARoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void courseCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCodeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseCodeFieldActionPerformed

    private void courseTitleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseTitleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseTitleFieldActionPerformed

    private void enrollAStudentButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enrollAStudentButtonMouseReleased
        // TODO add your handling code here:
        String studentIdStr = JOptionPane.showInputDialog(this, "Enter Student ID:", "Enroll Student", JOptionPane.QUESTION_MESSAGE);
        if (studentIdStr != null && !studentIdStr.trim().isEmpty()) {
            try {
                int studentId = Integer.parseInt(studentIdStr);
                UserDAO userDAO = new UserDAO();
                User student = userDAO.findById(studentId);
                if (student != null && student.getRole() == Role.STUDENT) {
                    boolean alreadyEnrolled = false;
                    for (int i = 0; i < enrolledStudentsTable.getRowCount(); i++) {
                        if (Integer.parseInt(enrolledStudentsTable.getValueAt(i, 0).toString()) == studentId) {
                            alreadyEnrolled = true;
                            break;
                        }
                    }
                    if (!alreadyEnrolled) {
                        DefaultTableModel model = (DefaultTableModel) enrolledStudentsTable.getModel();
                        model.addRow(new Object[]{student.getUserID(), student.getName(), student.getEmail()});
                        studentsToAdd.add(studentId);
                        if (studentsToRemove.contains(studentId)) {
                            studentsToRemove.remove(Integer.valueOf(studentId));
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Student is already enrolled.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Student not found or invalid role.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Student ID format.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_enrollAStudentButtonMouseReleased

    private void unenrollAStudentButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unenrollAStudentButtonMouseReleased
        // TODO add your handling code here:
        int selectedRow = enrolledStudentsTable.getSelectedRow();
        if (selectedRow >= 0) {
            int studentId = Integer.parseInt(enrolledStudentsTable.getValueAt(selectedRow, 0).toString());
            DefaultTableModel model = (DefaultTableModel) enrolledStudentsTable.getModel();
            model.removeRow(selectedRow);
            studentsToRemove.add(studentId);
            if (studentsToAdd.contains(studentId)) {
                studentsToAdd.remove(Integer.valueOf(studentId));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a student to unenroll.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_unenrollAStudentButtonMouseReleased

    private void saveButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseReleased
        try {
            CourseDAO courseDAO = new CourseDAO();
            String courseCode = courseCodeField.getText();
            String courseTitle = courseTitleField.getText();

            if (courseToUpdate == null) {
                // Create a new course
                courseDAO.save(courseCode, courseTitle);
                Course newCourse = courseDAO.getCourseByCode(courseCode);
                for (Integer teacherId : teachersToAdd) {
                    courseDAO.assignTeacher(newCourse.getCourseId(), teacherId);
                }
                for (Integer studentId : studentsToAdd) {
                    courseDAO.enrollStudent(newCourse.getCourseId(), studentId);
                }
                for (String room : roomsToAdd) {
                    courseDAO.addRoomToCourse(newCourse.getCourseId(), room);
                }
            } else {
                // Update an existing course
                courseDAO.update(courseToUpdate.getCourseId(), courseCode, courseTitle);
                for (Integer teacherId : teachersToAdd) {
                    courseDAO.assignTeacher(courseToUpdate.getCourseId(), teacherId);
                }
                for (Integer teacherId : teachersToRemove) {
                    courseDAO.unassignTeacher(courseToUpdate.getCourseId(), teacherId);
                }
                for (Integer studentId : studentsToAdd) {
                    courseDAO.enrollStudent(courseToUpdate.getCourseId(), studentId);
                }
                for (Integer studentId : studentsToRemove) {
                    courseDAO.unenrollStudent(courseToUpdate.getCourseId(), studentId);
                }
                // Handle room additions and removals
                for (String room : roomsToAdd) {
                    courseDAO.addRoomToCourse(courseToUpdate.getCourseId(), room);
                }
                for (String room : roomsToRemove) {
                    // You'll need to implement a method in CourseDAO to remove a specific room
                    courseDAO.removeRoomFromCourse(courseToUpdate.getCourseId(), room); // Assuming you add this method
                }
            }
            this.dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonMouseReleased

    private void cancelButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseReleased
        // just exit out
        this.dispose();
    }//GEN-LAST:event_cancelButtonMouseReleased

    private void assignATeacherButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignATeacherButtonMouseReleased
        String teacherIdStr = JOptionPane.showInputDialog(this, "Enter Teacher ID:", "Assign Teacher", JOptionPane.QUESTION_MESSAGE);
        if (teacherIdStr != null && !teacherIdStr.trim().isEmpty()) {
            try {
                int teacherId = Integer.parseInt(teacherIdStr);
                UserDAO userDAO = new UserDAO();
                User teacher = userDAO.findById(teacherId);
                if (teacher != null && teacher.getRole() == Role.TEACHER) {
                    boolean alreadyAssigned = false;
                    for (int i = 0; i < assignedTeachersTable.getRowCount(); i++) {
                        if (Integer.parseInt(assignedTeachersTable.getValueAt(i, 0).toString()) == teacherId) {
                            alreadyAssigned = true;
                            break;
                        }
                    }
                    if (!alreadyAssigned) {
                        DefaultTableModel model = (DefaultTableModel) assignedTeachersTable.getModel();
                        model.addRow(new Object[]{teacher.getUserID(), teacher.getName(), teacher.getEmail()});
                        teachersToAdd.add(teacherId);
                        if (teachersToRemove.contains(teacherId)) {
                            teachersToRemove.remove(Integer.valueOf(teacherId));
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Teacher is already assigned.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Teacher not found or invalid role.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Teacher ID format.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_assignATeacherButtonMouseReleased

    private void unassignATeacherButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unassignATeacherButtonMouseReleased
        // TODO add your handling code here:
        int selectedRow = assignedTeachersTable.getSelectedRow();
        if (selectedRow >= 0) {
            int teacherId = Integer.parseInt(assignedTeachersTable.getValueAt(selectedRow, 0).toString());
            DefaultTableModel model = (DefaultTableModel) assignedTeachersTable.getModel();
            model.removeRow(selectedRow);
            teachersToRemove.add(teacherId);
            if (teachersToAdd.contains(teacherId)) {
                teachersToAdd.remove(Integer.valueOf(teacherId));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a teacher to unassign.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_unassignATeacherButtonMouseReleased

    private void addARoomButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addARoomButtonMouseReleased
        String roomCode = JOptionPane.showInputDialog(this, "Enter Room Code:", "Add Room", JOptionPane.QUESTION_MESSAGE);
        if (roomCode != null && !roomCode.trim().isEmpty()) {
            boolean alreadyExists = false;
            for (int i = 0; i < roomsTable.getRowCount(); i++) {
                if (roomsTable.getValueAt(i, 0).equals(roomCode)) {
                    alreadyExists = true;
                    break;
                }
            }
            if (!alreadyExists) {
                DefaultTableModel model = (DefaultTableModel) roomsTable.getModel();
                model.addRow(new Object[]{roomCode});
                roomsToAdd.add(roomCode);
            } else {
                JOptionPane.showMessageDialog(this, "Room already exists.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addARoomButtonMouseReleased

    private void removeARoomButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeARoomButtonMouseReleased
        int selectedRow = roomsTable.getSelectedRow();
        if (selectedRow >= 0) {
            String roomCode = roomsTable.getValueAt(selectedRow, 0).toString();
            DefaultTableModel model = (DefaultTableModel) roomsTable.getModel();
            model.removeRow(selectedRow);
            roomsToRemove.add(roomCode);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a room to remove.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeARoomButtonMouseReleased

    


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateCourse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addARoom;
    private javax.swing.JPanel addARoomButton;
    private javax.swing.JPanel assignATeacherButton;
    private javax.swing.JLabel assignATeacherText;
    private javax.swing.JTable assignedTeachersTable;
    private javax.swing.JPanel cancelButton;
    private javax.swing.JLabel cancelText;
    private javax.swing.JTextField courseCodeField;
    private javax.swing.JTextField courseTitleField;
    private javax.swing.JPanel enrollAStudentButton;
    private javax.swing.JLabel enrollAStudentText;
    private javax.swing.JTable enrolledStudentsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel removeARoom;
    private javax.swing.JPanel removeARoomButton;
    private javax.swing.JTable roomsTable;
    private javax.swing.JPanel saveButton;
    private javax.swing.JLabel saveText;
    private javax.swing.JPanel unassignATeacherButton;
    private javax.swing.JLabel unassignATeacherText;
    private javax.swing.JLabel unenrollAStudent;
    private javax.swing.JPanel unenrollAStudentButton;
    // End of variables declaration//GEN-END:variables
}
