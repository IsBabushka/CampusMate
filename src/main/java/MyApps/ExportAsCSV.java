/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyApps;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import MyLibs.Course;
import MyLibs.CourseDAO;
import MyLibs.Role;
import MyLibs.User;

/**
 *
 * @author allen
 */
public class ExportAsCSV extends javax.swing.JFrame {

    private ArrayList<User> users;

    /**
     * Creates new form ExportAsCSVForm
     */
    public ExportAsCSV(ArrayList<User> users) {
        initComponents();
        this.users = users;
        try {
            generateCSVPreview();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        csvTextArea = new javax.swing.JTextArea();
        downloadCsvFileButton = new javax.swing.JPanel();
        downloadCsvFileText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 700));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(67, 67, 67));
        jLabel1.setText("Export as CSV");

        csvTextArea.setEditable(false);
        csvTextArea.setBackground(new java.awt.Color(255, 255, 255));
        csvTextArea.setColumns(20);
        csvTextArea.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        csvTextArea.setForeground(new java.awt.Color(67, 67, 67));
        csvTextArea.setRows(5);
        csvTextArea.setBorder(null);
        jScrollPane1.setViewportView(csvTextArea);

        downloadCsvFileButton.setBackground(new java.awt.Color(49, 53, 110));
        downloadCsvFileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downloadCsvFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                downloadCsvFileButtonMouseReleased(evt);
            }
        });

        downloadCsvFileText.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        downloadCsvFileText.setForeground(new java.awt.Color(255, 255, 255));
        downloadCsvFileText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        downloadCsvFileText.setText("Download as .csv");

        javax.swing.GroupLayout downloadCsvFileButtonLayout = new javax.swing.GroupLayout(downloadCsvFileButton);
        downloadCsvFileButton.setLayout(downloadCsvFileButtonLayout);
        downloadCsvFileButtonLayout.setHorizontalGroup(
            downloadCsvFileButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadCsvFileButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(downloadCsvFileText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        downloadCsvFileButtonLayout.setVerticalGroup(
            downloadCsvFileButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(downloadCsvFileText, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(downloadCsvFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(downloadCsvFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downloadCsvFileButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadCsvFileButtonMouseReleased
        String csvData = csvTextArea.getText();
        if (csvData.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No data to export.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        fileChooser.setSelectedFile(new File("student_data.csv")); // Default file name
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Ensure the file has the .csv extension
            if (!filePath.toLowerCase().endsWith(".csv")) {
                filePath += ".csv";
                fileToSave = new File(filePath);
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(csvData);
                JOptionPane.showMessageDialog(this, "Data exported successfully to: " + filePath, "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_downloadCsvFileButtonMouseReleased

    private void generateCSVPreview() throws SQLException {
        StringBuilder csvData = new StringBuilder();

        // Header row
        csvData.append("ID,Name,Classes,Date of Birth,Gender,Email Address");
        if (users.stream().anyMatch(u -> u.getRole() == Role.TEACHER)) {
            csvData.append(",Department");
        }
        csvData.append("\n");

        // Data rows
        CourseDAO courseDAO;
        try {
            courseDAO = new CourseDAO();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error accessing database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (User user : users) {
            csvData.append(user.getUserID()).append(",");
            csvData.append(user.getName()).append(",");

            // Handle Classes (Courses)
            ArrayList<Course> courses = courseDAO.findCoursesByUserId(user.getUserID());
            StringBuilder classes = new StringBuilder("\""); // Start with a quote
            if (courses != null) {
                for (Course course : courses) {
                    classes.append(course.getCourseCode()).append(", ");
                }
                if (classes.length() > 2) {
                    classes.delete(classes.length() - 2, classes.length()); // Remove trailing comma and space
                }
            } else {
                classes.append("-");
            }
            classes.append("\""); // End with a quote
            csvData.append(classes).append(",");


            csvData.append(user.getBirthdate()).append(",");
            csvData.append(user.getGender()).append(",");
            csvData.append(user.getEmail());

            if (user.getRole() == Role.TEACHER) {
                csvData.append(",").append(user.getDepartment());
            }
            csvData.append("\n");
        }

        csvTextArea.setText(csvData.toString());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportAsCSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportAsCSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportAsCSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportAsCSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new ExportAsCSV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea csvTextArea;
    private javax.swing.JPanel downloadCsvFileButton;
    private javax.swing.JLabel downloadCsvFileText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
