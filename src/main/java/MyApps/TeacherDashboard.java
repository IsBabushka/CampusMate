/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyApps;


import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author allen
 */
import MyLibs.*;

public class TeacherDashboard extends javax.swing.JFrame {

    private User originalUser;

    /**
     * Creates new form TeacherDashboard
     */
    public TeacherDashboard() {
        initComponents();
        Manager manager = Manager.getInstance();
        originalUser = manager.getCurrentUser();

        // keep the attendance, tasks, and student profile panels invisible, set current course to nothing
        manager.setCurrentCourse(null);
        
        // for the buttons
        attendancePanel.setVisible(false);
        tasksPanel.setVisible(false);
        studentProfilePanel.setVisible(false);
        
        teacherCourseText.setText("Teacher");
        selectedCourseText.setText("");
        selectButton.setBackground(new java.awt.Color(101, 139, 112));
        selectText.setText("Select");
        
        populateFields(); // Add this line to populate fields
        populateTables();
    }

    public TeacherDashboard(User user) {
        initComponents();
        Manager manager = Manager.getInstance();
        manager.setCurrentUser(user);
        originalUser = user; // Use the provided User object

        // keep the attendance, tasks, and student profile panels invisible, set current course to nothing
        manager.setCurrentCourse(null);
        
        // for the buttons
        attendancePanel.setVisible(false);
        tasksPanel.setVisible(false);
        studentProfilePanel.setVisible(false);
        
        teacherCourseText.setText("Teacher");
        selectedCourseText.setText("");
        selectButton.setBackground(new java.awt.Color(101, 139, 112));
        selectText.setText("Select");

        populateFields(); // Add this line to populate fields
        populateTables();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        CampusMateLogo = new javax.swing.JLabel();
        courseSelectionPanel = new javax.swing.JPanel();
        courseSelectionText = new javax.swing.JLabel();
        courseSelectionIcon = new javax.swing.JLabel();
        attendancePanel = new javax.swing.JPanel();
        attendanceText = new javax.swing.JLabel();
        attendanceIcon = new javax.swing.JLabel();
        tasksPanel = new javax.swing.JPanel();
        tasksText = new javax.swing.JLabel();
        tasksIcon = new javax.swing.JLabel();
        studentProfilePanel = new javax.swing.JPanel();
        studentProfileText = new javax.swing.JLabel();
        studentProfileIcon = new javax.swing.JLabel();
        signOutPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        editMyProfilePanel = new javax.swing.JPanel();
        editMyProfileText = new javax.swing.JLabel();
        editMyProfileIcon = new javax.swing.JLabel();
        headerPanel1 = new javax.swing.JPanel();
        headerText = new javax.swing.JLabel();
        fullnameText = new javax.swing.JLabel();
        teacherCourseText = new javax.swing.JLabel();
        headerDivider = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        courseSelectionTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseSelectionTable = new javax.swing.JTable();
        selectButton = new javax.swing.JPanel();
        selectText = new javax.swing.JLabel();
        selectedCourseTitle = new javax.swing.JLabel();
        selectedCourseText = new javax.swing.JLabel();
        attendanceTab = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        attendanceTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        presentButton_Attendance = new javax.swing.JPanel();
        presentText_Attendance = new javax.swing.JLabel();
        lateButton_Attendance = new javax.swing.JPanel();
        lateText_Attendance = new javax.swing.JLabel();
        absentButton_Attendance = new javax.swing.JPanel();
        absentText_Attendance = new javax.swing.JLabel();
        addASessionButton_Attendance = new javax.swing.JPanel();
        addASessionText_Attendance = new javax.swing.JLabel();
        editASessionButton_Attendance = new javax.swing.JPanel();
        editASessionText_Attendance = new javax.swing.JLabel();
        removeASessionButton_Attendance = new javax.swing.JPanel();
        removeASessionText_Attendance = new javax.swing.JLabel();
        filterBySessionID_Attendance = new javax.swing.JCheckBox();
        filterBySessionIDField_Attendance = new javax.swing.JTextField();
        filterByStudentID_Attendance = new javax.swing.JCheckBox();
        filterByStudentIDField_Attendance = new javax.swing.JTextField();
        tasksTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        attendanceTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        addATaskButton_Tasks = new javax.swing.JPanel();
        addATaskText_Tasks = new javax.swing.JLabel();
        editATaskButton_Tasks = new javax.swing.JPanel();
        editATaskText_Tasks = new javax.swing.JLabel();
        removeATaskButton_Tasks = new javax.swing.JPanel();
        removeATaskText_Tasks = new javax.swing.JLabel();
        filterByTaskID_Tasks = new javax.swing.JCheckBox();
        filterByTaskIDField_Tasks = new javax.swing.JTextField();
        filterByStudentID_Tasks = new javax.swing.JCheckBox();
        filterByStudentIDField_Tasks = new javax.swing.JTextField();
        viewSubmissionButton_Tasks = new javax.swing.JPanel();
        removeASessionText_Attendance2 = new javax.swing.JLabel();
        filterByGrade_Tasks = new javax.swing.JCheckBox();
        filterByGradeLowerBoundField_Tasks = new javax.swing.JTextField();
        FilterByGradeTo_Tasks = new javax.swing.JLabel();
        filterByGradeUpperBoundField_Tasks = new javax.swing.JTextField();
        studentProfileTab = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        studentProfileTable = new javax.swing.JTable();
        editMyProfileTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        birthdateField = new javax.swing.JTextField();
        genderField = new javax.swing.JTextField();
        changePasswordLink = new javax.swing.JLabel();
        saveChangesButton = new javax.swing.JPanel();
        saveChangesText = new javax.swing.JLabel();
        resetChangesButton = new javax.swing.JPanel();
        resetChangesText = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        departmentField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(1200, 800));
        jPanel1.setMinimumSize(new java.awt.Dimension(1200, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(35, 35, 35));
        jPanel2.setMaximumSize(new java.awt.Dimension(230, 800));
        jPanel2.setMinimumSize(new java.awt.Dimension(230, 800));
        jPanel2.setPreferredSize(new java.awt.Dimension(230, 800));

        CampusMateLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img02_dashboard_logo.png"))); // NOI18N

        courseSelectionPanel.setBackground(new java.awt.Color(67, 67, 67));
        courseSelectionPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        courseSelectionPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courseSelectionPanelMouseReleased(evt);
            }
        });

        courseSelectionText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        courseSelectionText.setForeground(new java.awt.Color(219, 219, 219));
        courseSelectionText.setText("Course Selection");

        courseSelectionIcon.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        courseSelectionIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img11_courseSelection_selected.png"))); // NOI18N

        javax.swing.GroupLayout courseSelectionPanelLayout = new javax.swing.GroupLayout(courseSelectionPanel);
        courseSelectionPanel.setLayout(courseSelectionPanelLayout);
        courseSelectionPanelLayout.setHorizontalGroup(
            courseSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, courseSelectionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(courseSelectionIcon)
                .addGap(18, 18, 18)
                .addComponent(courseSelectionText)
                .addGap(31, 31, 31))
        );
        courseSelectionPanelLayout.setVerticalGroup(
            courseSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseSelectionPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(courseSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(courseSelectionIcon)
                    .addComponent(courseSelectionText))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        attendancePanel.setBackground(new java.awt.Color(35, 35, 35));
        attendancePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        attendancePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                attendancePanelMouseReleased(evt);
            }
        });
        attendancePanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                attendancePanelKeyReleased(evt);
            }
        });

        attendanceText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        attendanceText.setForeground(new java.awt.Color(112, 110, 110));
        attendanceText.setText("Attendance");

        attendanceIcon.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        attendanceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img14_attendance_unselected.png"))); // NOI18N

        javax.swing.GroupLayout attendancePanelLayout = new javax.swing.GroupLayout(attendancePanel);
        attendancePanel.setLayout(attendancePanelLayout);
        attendancePanelLayout.setHorizontalGroup(
            attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attendancePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(attendanceIcon)
                .addGap(18, 18, 18)
                .addComponent(attendanceText)
                .addGap(76, 76, 76))
        );
        attendancePanelLayout.setVerticalGroup(
            attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendancePanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(attendanceIcon)
                    .addComponent(attendanceText))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tasksPanel.setBackground(new java.awt.Color(35, 35, 35));
        tasksPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tasksPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tasksPanelMouseReleased(evt);
            }
        });

        tasksText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        tasksText.setForeground(new java.awt.Color(112, 110, 110));
        tasksText.setText("Tasks");

        tasksIcon.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        tasksIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img16_tasks_unselected.png"))); // NOI18N

        javax.swing.GroupLayout tasksPanelLayout = new javax.swing.GroupLayout(tasksPanel);
        tasksPanel.setLayout(tasksPanelLayout);
        tasksPanelLayout.setHorizontalGroup(
            tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tasksPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tasksIcon)
                .addGap(18, 18, 18)
                .addComponent(tasksText)
                .addGap(121, 121, 121))
        );
        tasksPanelLayout.setVerticalGroup(
            tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tasksText)
                    .addComponent(tasksIcon))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        studentProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        studentProfilePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        studentProfilePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                studentProfilePanelMouseReleased(evt);
            }
        });

        studentProfileText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        studentProfileText.setForeground(new java.awt.Color(112, 110, 110));
        studentProfileText.setText("Student Profile");

        studentProfileIcon.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        studentProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img18_studentProfile_unselected.png"))); // NOI18N

        javax.swing.GroupLayout studentProfilePanelLayout = new javax.swing.GroupLayout(studentProfilePanel);
        studentProfilePanel.setLayout(studentProfilePanelLayout);
        studentProfilePanelLayout.setHorizontalGroup(
            studentProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentProfilePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(studentProfileIcon)
                .addGap(18, 18, 18)
                .addComponent(studentProfileText)
                .addGap(52, 52, 52))
        );
        studentProfilePanelLayout.setVerticalGroup(
            studentProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentProfilePanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(studentProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(studentProfileIcon)
                    .addComponent(studentProfileText))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        signOutPanel.setBackground(new java.awt.Color(49, 49, 49));
        signOutPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signOutPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                signOutPanelMouseReleased(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(219, 219, 219));
        jLabel9.setText("Sign Out");

        javax.swing.GroupLayout signOutPanelLayout = new javax.swing.GroupLayout(signOutPanel);
        signOutPanel.setLayout(signOutPanelLayout);
        signOutPanelLayout.setHorizontalGroup(
            signOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signOutPanelLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        signOutPanelLayout.setVerticalGroup(
            signOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
        );

        editMyProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        editMyProfilePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editMyProfilePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editMyProfilePanelMouseReleased(evt);
            }
        });

        editMyProfileText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        editMyProfileText.setForeground(new java.awt.Color(112, 110, 110));
        editMyProfileText.setText("Edit my Profile");

        editMyProfileIcon.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        editMyProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img20_editMyProfile_unselected.png"))); // NOI18N

        javax.swing.GroupLayout editMyProfilePanelLayout = new javax.swing.GroupLayout(editMyProfilePanel);
        editMyProfilePanel.setLayout(editMyProfilePanelLayout);
        editMyProfilePanelLayout.setHorizontalGroup(
            editMyProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editMyProfilePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editMyProfileIcon)
                .addGap(21, 21, 21)
                .addComponent(editMyProfileText)
                .addGap(52, 52, 52))
        );
        editMyProfilePanelLayout.setVerticalGroup(
            editMyProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMyProfilePanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(editMyProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(editMyProfileIcon)
                    .addComponent(editMyProfileText))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(CampusMateLogo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(courseSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(attendancePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tasksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(studentProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(signOutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editMyProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(CampusMateLogo)
                .addGap(67, 67, 67)
                .addComponent(courseSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attendancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tasksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editMyProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
                .addComponent(signOutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 765));

        headerPanel1.setBackground(new java.awt.Color(255, 255, 255));

        headerText.setBackground(new java.awt.Color(67, 67, 67));
        headerText.setFont(new java.awt.Font("Helvetica", 1, 36)); // NOI18N
        headerText.setForeground(new java.awt.Color(67, 67, 67));
        headerText.setText("Dashboard");

        fullnameText.setBackground(new java.awt.Color(67, 67, 67));
        fullnameText.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        fullnameText.setForeground(new java.awt.Color(67, 67, 67));
        fullnameText.setText("Fullname");

        teacherCourseText.setBackground(new java.awt.Color(67, 67, 67));
        teacherCourseText.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        teacherCourseText.setForeground(new java.awt.Color(67, 67, 67));
        teacherCourseText.setText("Teacher");

        headerDivider.setBackground(new java.awt.Color(112, 110, 110));
        headerDivider.setPreferredSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout headerDividerLayout = new javax.swing.GroupLayout(headerDivider);
        headerDivider.setLayout(headerDividerLayout);
        headerDividerLayout.setHorizontalGroup(
            headerDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 933, Short.MAX_VALUE)
        );
        headerDividerLayout.setVerticalGroup(
            headerDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout headerPanel1Layout = new javax.swing.GroupLayout(headerPanel1);
        headerPanel1.setLayout(headerPanel1Layout);
        headerPanel1Layout.setHorizontalGroup(
            headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(headerPanel1Layout.createSequentialGroup()
                        .addComponent(headerText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fullnameText, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(teacherCourseText, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(headerDivider, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        headerPanel1Layout.setVerticalGroup(
            headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(headerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanel1Layout.createSequentialGroup()
                        .addComponent(fullnameText)
                        .addGap(2, 2, 2)
                        .addComponent(teacherCourseText))
                    .addComponent(headerText))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(headerDivider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(headerPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 990, -1));

        courseSelectionTab.setBackground(new java.awt.Color(255, 255, 255));

        courseSelectionTable.setBackground(new java.awt.Color(255, 255, 255));
        courseSelectionTable.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        courseSelectionTable.setForeground(new java.awt.Color(0, 0, 0));
        courseSelectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Course Code", "Course Title", "Teachers", "Rooms", "Average Grade", "Attendance Rates"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseSelectionTable.setRowHeight(40);
        courseSelectionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courseSelectionTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(courseSelectionTable);
        if (courseSelectionTable.getColumnModel().getColumnCount() > 0) {
            courseSelectionTable.getColumnModel().getColumn(5).setHeaderValue("Attendance Rates");
        }

        selectButton.setBackground(new java.awt.Color(101, 139, 112));
        selectButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        selectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                selectButtonMouseReleased(evt);
            }
        });

        selectText.setBackground(new java.awt.Color(67, 67, 67));
        selectText.setFont(new java.awt.Font("Helvetica", 1, 36)); // NOI18N
        selectText.setForeground(new java.awt.Color(255, 255, 255));
        selectText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectText.setText("Select");

        javax.swing.GroupLayout selectButtonLayout = new javax.swing.GroupLayout(selectButton);
        selectButton.setLayout(selectButtonLayout);
        selectButtonLayout.setHorizontalGroup(
            selectButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        selectButtonLayout.setVerticalGroup(
            selectButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(selectText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );

        selectedCourseTitle.setBackground(new java.awt.Color(67, 67, 67));
        selectedCourseTitle.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        selectedCourseTitle.setForeground(new java.awt.Color(67, 67, 67));
        selectedCourseTitle.setText("Selected Course: ");

        selectedCourseText.setBackground(new java.awt.Color(67, 67, 67));
        selectedCourseText.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        selectedCourseText.setForeground(new java.awt.Color(67, 67, 67));
        selectedCourseText.setText("<selected course>");

        javax.swing.GroupLayout courseSelectionTabLayout = new javax.swing.GroupLayout(courseSelectionTab);
        courseSelectionTab.setLayout(courseSelectionTabLayout);
        courseSelectionTabLayout.setHorizontalGroup(
            courseSelectionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseSelectionTabLayout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addGroup(courseSelectionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                    .addComponent(selectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(courseSelectionTabLayout.createSequentialGroup()
                        .addComponent(selectedCourseTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedCourseText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        courseSelectionTabLayout.setVerticalGroup(
            courseSelectionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseSelectionTabLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(courseSelectionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedCourseTitle)
                    .addComponent(selectedCourseText))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", courseSelectionTab);

        attendanceTab.setBackground(new java.awt.Color(255, 255, 255));

        attendanceTable.setBackground(new java.awt.Color(255, 255, 255));
        attendanceTable.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        attendanceTable.setForeground(new java.awt.Color(0, 0, 0));
        attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Session ID", "Session Title", "Student Name", "Student ID", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        attendanceTable.setRowHeight(40);
        attendanceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                attendanceTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(attendanceTable);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        presentButton_Attendance.setBackground(new java.awt.Color(101, 139, 112));
        presentButton_Attendance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        presentButton_Attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                presentButton_AttendanceMouseReleased(evt);
            }
        });

        presentText_Attendance.setBackground(new java.awt.Color(67, 67, 67));
        presentText_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        presentText_Attendance.setForeground(new java.awt.Color(255, 255, 255));
        presentText_Attendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        presentText_Attendance.setText("Present");

        javax.swing.GroupLayout presentButton_AttendanceLayout = new javax.swing.GroupLayout(presentButton_Attendance);
        presentButton_Attendance.setLayout(presentButton_AttendanceLayout);
        presentButton_AttendanceLayout.setHorizontalGroup(
            presentButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(presentButton_AttendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(presentText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap())
        );
        presentButton_AttendanceLayout.setVerticalGroup(
            presentButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(presentText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        lateButton_Attendance.setBackground(new java.awt.Color(253, 199, 108));
        lateButton_Attendance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lateButton_Attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lateButton_AttendanceMouseReleased(evt);
            }
        });

        lateText_Attendance.setBackground(new java.awt.Color(67, 67, 67));
        lateText_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        lateText_Attendance.setForeground(new java.awt.Color(255, 255, 255));
        lateText_Attendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lateText_Attendance.setText("Late");

        javax.swing.GroupLayout lateButton_AttendanceLayout = new javax.swing.GroupLayout(lateButton_Attendance);
        lateButton_Attendance.setLayout(lateButton_AttendanceLayout);
        lateButton_AttendanceLayout.setHorizontalGroup(
            lateButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lateButton_AttendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lateText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addContainerGap())
        );
        lateButton_AttendanceLayout.setVerticalGroup(
            lateButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lateText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        absentButton_Attendance.setBackground(new java.awt.Color(194, 130, 130));
        absentButton_Attendance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        absentButton_Attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                absentButton_AttendanceMouseReleased(evt);
            }
        });

        absentText_Attendance.setBackground(new java.awt.Color(67, 67, 67));
        absentText_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        absentText_Attendance.setForeground(new java.awt.Color(255, 255, 255));
        absentText_Attendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        absentText_Attendance.setText("Absent");

        javax.swing.GroupLayout absentButton_AttendanceLayout = new javax.swing.GroupLayout(absentButton_Attendance);
        absentButton_Attendance.setLayout(absentButton_AttendanceLayout);
        absentButton_AttendanceLayout.setHorizontalGroup(
            absentButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(absentButton_AttendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(absentText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        absentButton_AttendanceLayout.setVerticalGroup(
            absentButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(absentText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        addASessionButton_Attendance.setBackground(new java.awt.Color(101, 139, 112));
        addASessionButton_Attendance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addASessionButton_Attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addASessionButton_AttendanceMouseReleased(evt);
            }
        });

        addASessionText_Attendance.setBackground(new java.awt.Color(67, 67, 67));
        addASessionText_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        addASessionText_Attendance.setForeground(new java.awt.Color(255, 255, 255));
        addASessionText_Attendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addASessionText_Attendance.setText("Add a session");

        javax.swing.GroupLayout addASessionButton_AttendanceLayout = new javax.swing.GroupLayout(addASessionButton_Attendance);
        addASessionButton_Attendance.setLayout(addASessionButton_AttendanceLayout);
        addASessionButton_AttendanceLayout.setHorizontalGroup(
            addASessionButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addASessionButton_AttendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addASessionText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        addASessionButton_AttendanceLayout.setVerticalGroup(
            addASessionButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addASessionText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        editASessionButton_Attendance.setBackground(new java.awt.Color(49, 53, 110));
        editASessionButton_Attendance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editASessionButton_Attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editASessionButton_AttendanceMouseReleased(evt);
            }
        });

        editASessionText_Attendance.setBackground(new java.awt.Color(67, 67, 67));
        editASessionText_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        editASessionText_Attendance.setForeground(new java.awt.Color(255, 255, 255));
        editASessionText_Attendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editASessionText_Attendance.setText("Edit a session");

        javax.swing.GroupLayout editASessionButton_AttendanceLayout = new javax.swing.GroupLayout(editASessionButton_Attendance);
        editASessionButton_Attendance.setLayout(editASessionButton_AttendanceLayout);
        editASessionButton_AttendanceLayout.setHorizontalGroup(
            editASessionButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editASessionButton_AttendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editASessionText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        editASessionButton_AttendanceLayout.setVerticalGroup(
            editASessionButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editASessionText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        removeASessionButton_Attendance.setBackground(new java.awt.Color(194, 130, 130));
        removeASessionButton_Attendance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeASessionButton_Attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removeASessionButton_AttendanceMouseReleased(evt);
            }
        });

        removeASessionText_Attendance.setBackground(new java.awt.Color(67, 67, 67));
        removeASessionText_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        removeASessionText_Attendance.setForeground(new java.awt.Color(255, 255, 255));
        removeASessionText_Attendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeASessionText_Attendance.setText("Remove a session");

        javax.swing.GroupLayout removeASessionButton_AttendanceLayout = new javax.swing.GroupLayout(removeASessionButton_Attendance);
        removeASessionButton_Attendance.setLayout(removeASessionButton_AttendanceLayout);
        removeASessionButton_AttendanceLayout.setHorizontalGroup(
            removeASessionButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeASessionButton_AttendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeASessionText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        removeASessionButton_AttendanceLayout.setVerticalGroup(
            removeASessionButton_AttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(removeASessionText_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        filterBySessionID_Attendance.setBackground(new java.awt.Color(255, 255, 255));
        filterBySessionID_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        filterBySessionID_Attendance.setForeground(new java.awt.Color(67, 67, 67));
        filterBySessionID_Attendance.setText("Filter By Session ID");
        filterBySessionID_Attendance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterBySessionID_Attendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySessionID_AttendanceActionPerformed(evt);
            }
        });

        filterBySessionIDField_Attendance.setEditable(false);
        filterBySessionIDField_Attendance.setBackground(new java.awt.Color(255, 255, 255));
        filterBySessionIDField_Attendance.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        filterBySessionIDField_Attendance.setForeground(new java.awt.Color(67, 67, 67));
        filterBySessionIDField_Attendance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterBySessionIDField_Attendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySessionIDField_AttendanceActionPerformed(evt);
            }
        });
        filterBySessionIDField_Attendance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterBySessionIDField_AttendanceKeyReleased(evt);
            }
        });

        filterByStudentID_Attendance.setBackground(new java.awt.Color(255, 255, 255));
        filterByStudentID_Attendance.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        filterByStudentID_Attendance.setForeground(new java.awt.Color(67, 67, 67));
        filterByStudentID_Attendance.setText("Filter By Student ID");
        filterByStudentID_Attendance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByStudentID_Attendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByStudentID_AttendanceActionPerformed(evt);
            }
        });

        filterByStudentIDField_Attendance.setEditable(false);
        filterByStudentIDField_Attendance.setBackground(new java.awt.Color(255, 255, 255));
        filterByStudentIDField_Attendance.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        filterByStudentIDField_Attendance.setForeground(new java.awt.Color(67, 67, 67));
        filterByStudentIDField_Attendance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByStudentIDField_Attendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByStudentIDField_AttendanceActionPerformed(evt);
            }
        });
        filterByStudentIDField_Attendance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterByStudentIDField_AttendanceKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterBySessionID_Attendance)
                            .addComponent(filterBySessionIDField_Attendance)
                            .addComponent(filterByStudentID_Attendance)
                            .addComponent(filterByStudentIDField_Attendance)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(16, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(removeASessionButton_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editASessionButton_Attendance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addASessionButton_Attendance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(presentButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lateButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(absentButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(96, 96, 96))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(absentButton_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lateButton_Attendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(presentButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(addASessionButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editASessionButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeASessionButton_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(filterBySessionID_Attendance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterBySessionIDField_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filterByStudentID_Attendance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterByStudentIDField_Attendance, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout attendanceTabLayout = new javax.swing.GroupLayout(attendanceTab);
        attendanceTab.setLayout(attendanceTabLayout);
        attendanceTabLayout.setHorizontalGroup(
            attendanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendanceTabLayout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        attendanceTabLayout.setVerticalGroup(
            attendanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendanceTabLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(attendanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", attendanceTab);

        tasksTab.setBackground(new java.awt.Color(255, 255, 255));

        attendanceTable1.setBackground(new java.awt.Color(255, 255, 255));
        attendanceTable1.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        attendanceTable1.setForeground(new java.awt.Color(0, 0, 0));
        attendanceTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Submission ID", "Task ID", "Task Title", "Student Name", "Student ID", "Status", "Grade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        attendanceTable1.setRowHeight(40);
        attendanceTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                attendanceTable1MouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(attendanceTable1);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        addATaskButton_Tasks.setBackground(new java.awt.Color(101, 139, 112));
        addATaskButton_Tasks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addATaskButton_Tasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addATaskButton_TasksMouseReleased(evt);
            }
        });

        addATaskText_Tasks.setBackground(new java.awt.Color(67, 67, 67));
        addATaskText_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        addATaskText_Tasks.setForeground(new java.awt.Color(255, 255, 255));
        addATaskText_Tasks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addATaskText_Tasks.setText("Add a task");

        javax.swing.GroupLayout addATaskButton_TasksLayout = new javax.swing.GroupLayout(addATaskButton_Tasks);
        addATaskButton_Tasks.setLayout(addATaskButton_TasksLayout);
        addATaskButton_TasksLayout.setHorizontalGroup(
            addATaskButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addATaskButton_TasksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addATaskText_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        addATaskButton_TasksLayout.setVerticalGroup(
            addATaskButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addATaskText_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        editATaskButton_Tasks.setBackground(new java.awt.Color(49, 53, 110));
        editATaskButton_Tasks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editATaskButton_Tasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editATaskButton_TasksMouseReleased(evt);
            }
        });

        editATaskText_Tasks.setBackground(new java.awt.Color(67, 67, 67));
        editATaskText_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        editATaskText_Tasks.setForeground(new java.awt.Color(255, 255, 255));
        editATaskText_Tasks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editATaskText_Tasks.setText("Edit a task");

        javax.swing.GroupLayout editATaskButton_TasksLayout = new javax.swing.GroupLayout(editATaskButton_Tasks);
        editATaskButton_Tasks.setLayout(editATaskButton_TasksLayout);
        editATaskButton_TasksLayout.setHorizontalGroup(
            editATaskButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editATaskButton_TasksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editATaskText_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        editATaskButton_TasksLayout.setVerticalGroup(
            editATaskButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editATaskText_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        removeATaskButton_Tasks.setBackground(new java.awt.Color(194, 130, 130));
        removeATaskButton_Tasks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeATaskButton_Tasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removeATaskButton_TasksMouseReleased(evt);
            }
        });

        removeATaskText_Tasks.setBackground(new java.awt.Color(67, 67, 67));
        removeATaskText_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        removeATaskText_Tasks.setForeground(new java.awt.Color(255, 255, 255));
        removeATaskText_Tasks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeATaskText_Tasks.setText("Remove a task");

        javax.swing.GroupLayout removeATaskButton_TasksLayout = new javax.swing.GroupLayout(removeATaskButton_Tasks);
        removeATaskButton_Tasks.setLayout(removeATaskButton_TasksLayout);
        removeATaskButton_TasksLayout.setHorizontalGroup(
            removeATaskButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeATaskButton_TasksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeATaskText_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        removeATaskButton_TasksLayout.setVerticalGroup(
            removeATaskButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(removeATaskText_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        filterByTaskID_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByTaskID_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        filterByTaskID_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByTaskID_Tasks.setText("Filter By Task ID");
        filterByTaskID_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByTaskID_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByTaskID_TasksActionPerformed(evt);
            }
        });

        filterByTaskIDField_Tasks.setEditable(false);
        filterByTaskIDField_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByTaskIDField_Tasks.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        filterByTaskIDField_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByTaskIDField_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByTaskIDField_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByTaskIDField_TasksActionPerformed(evt);
            }
        });
        filterByTaskIDField_Tasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterByTaskIDField_TasksKeyReleased(evt);
            }
        });

        filterByStudentID_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByStudentID_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        filterByStudentID_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByStudentID_Tasks.setText("Filter By Student ID");
        filterByStudentID_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByStudentID_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByStudentID_TasksActionPerformed(evt);
            }
        });

        filterByStudentIDField_Tasks.setEditable(false);
        filterByStudentIDField_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByStudentIDField_Tasks.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        filterByStudentIDField_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByStudentIDField_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByStudentIDField_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByStudentIDField_TasksActionPerformed(evt);
            }
        });
        filterByStudentIDField_Tasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterByStudentIDField_TasksKeyReleased(evt);
            }
        });

        viewSubmissionButton_Tasks.setBackground(new java.awt.Color(112, 110, 110));
        viewSubmissionButton_Tasks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewSubmissionButton_Tasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                viewSubmissionButton_TasksMouseReleased(evt);
            }
        });

        removeASessionText_Attendance2.setBackground(new java.awt.Color(67, 67, 67));
        removeASessionText_Attendance2.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        removeASessionText_Attendance2.setForeground(new java.awt.Color(255, 255, 255));
        removeASessionText_Attendance2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeASessionText_Attendance2.setText("View Submission");

        javax.swing.GroupLayout viewSubmissionButton_TasksLayout = new javax.swing.GroupLayout(viewSubmissionButton_Tasks);
        viewSubmissionButton_Tasks.setLayout(viewSubmissionButton_TasksLayout);
        viewSubmissionButton_TasksLayout.setHorizontalGroup(
            viewSubmissionButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewSubmissionButton_TasksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeASessionText_Attendance2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        viewSubmissionButton_TasksLayout.setVerticalGroup(
            viewSubmissionButton_TasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(removeASessionText_Attendance2, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        filterByGrade_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByGrade_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        filterByGrade_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByGrade_Tasks.setText("Filter By Grade");
        filterByGrade_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByGrade_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByGrade_TasksActionPerformed(evt);
            }
        });

        filterByGradeLowerBoundField_Tasks.setEditable(false);
        filterByGradeLowerBoundField_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByGradeLowerBoundField_Tasks.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        filterByGradeLowerBoundField_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByGradeLowerBoundField_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByGradeLowerBoundField_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByGradeLowerBoundField_TasksActionPerformed(evt);
            }
        });
        filterByGradeLowerBoundField_Tasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterByGradeLowerBoundField_TasksKeyReleased(evt);
            }
        });

        FilterByGradeTo_Tasks.setBackground(new java.awt.Color(67, 67, 67));
        FilterByGradeTo_Tasks.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        FilterByGradeTo_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        FilterByGradeTo_Tasks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FilterByGradeTo_Tasks.setText("to");

        filterByGradeUpperBoundField_Tasks.setEditable(false);
        filterByGradeUpperBoundField_Tasks.setBackground(new java.awt.Color(255, 255, 255));
        filterByGradeUpperBoundField_Tasks.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        filterByGradeUpperBoundField_Tasks.setForeground(new java.awt.Color(67, 67, 67));
        filterByGradeUpperBoundField_Tasks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filterByGradeUpperBoundField_Tasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByGradeUpperBoundField_TasksActionPerformed(evt);
            }
        });
        filterByGradeUpperBoundField_Tasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterByGradeUpperBoundField_TasksKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filterByTaskID_Tasks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filterByTaskIDField_Tasks, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterByStudentIDField_Tasks, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterByStudentID_Tasks, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterByGrade_Tasks, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(filterByGradeLowerBoundField_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FilterByGradeTo_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filterByGradeUpperBoundField_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeATaskButton_Tasks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addATaskButton_Tasks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editATaskButton_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewSubmissionButton_Tasks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addATaskButton_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editATaskButton_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeATaskButton_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewSubmissionButton_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filterByTaskID_Tasks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterByTaskIDField_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filterByStudentID_Tasks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterByStudentIDField_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterByGrade_Tasks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterByGradeLowerBoundField_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filterByGradeUpperBoundField_Tasks, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FilterByGradeTo_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tasksTabLayout = new javax.swing.GroupLayout(tasksTab);
        tasksTab.setLayout(tasksTabLayout);
        tasksTabLayout.setHorizontalGroup(
            tasksTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksTabLayout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        tasksTabLayout.setVerticalGroup(
            tasksTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksTabLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(tasksTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", tasksTab);

        studentProfileTab.setBackground(new java.awt.Color(255, 255, 255));

        studentProfileTable.setBackground(new java.awt.Color(255, 255, 255));
        studentProfileTable.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        studentProfileTable.setForeground(new java.awt.Color(0, 0, 0));
        studentProfileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Date of Birth", "Gender", "Email Address", "Average Grade", "Attendance Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentProfileTable.setRowHeight(40);
        studentProfileTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                studentProfileTableMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(studentProfileTable);

        javax.swing.GroupLayout studentProfileTabLayout = new javax.swing.GroupLayout(studentProfileTab);
        studentProfileTab.setLayout(studentProfileTabLayout);
        studentProfileTabLayout.setHorizontalGroup(
            studentProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentProfileTabLayout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        studentProfileTabLayout.setVerticalGroup(
            studentProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentProfileTabLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        jTabbedPane1.addTab("tab1", studentProfileTab);

        editMyProfileTab.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(67, 67, 67));
        jLabel1.setText("Name");

        jLabel2.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(67, 67, 67));
        jLabel2.setText("Email");

        jLabel4.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(67, 67, 67));
        jLabel4.setText("Birthdate");

        jLabel5.setFont(new java.awt.Font("Helvetica", 2, 8)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(67, 67, 67));
        jLabel5.setText(" (YYYY/MM/DD)");

        jLabel6.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(67, 67, 67));
        jLabel6.setText("Gender");

        jLabel7.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(67, 67, 67));
        jLabel7.setText("Role");

        jLabel8.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(67, 67, 67));
        jLabel8.setText("Teacher");

        nameField.setBackground(new java.awt.Color(255, 255, 255));
        nameField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        nameField.setForeground(new java.awt.Color(67, 67, 67));
        nameField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        emailField.setBackground(new java.awt.Color(255, 255, 255));
        emailField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        emailField.setForeground(new java.awt.Color(67, 67, 67));
        emailField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        birthdateField.setBackground(new java.awt.Color(255, 255, 255));
        birthdateField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        birthdateField.setForeground(new java.awt.Color(67, 67, 67));
        birthdateField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        genderField.setBackground(new java.awt.Color(255, 255, 255));
        genderField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        genderField.setForeground(new java.awt.Color(67, 67, 67));
        genderField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        changePasswordLink.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        changePasswordLink.setForeground(new java.awt.Color(30, 56, 115));
        changePasswordLink.setText("Change Password");
        changePasswordLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        changePasswordLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                changePasswordLinkMouseReleased(evt);
            }
        });

        saveChangesButton.setBackground(new java.awt.Color(101, 139, 112));
        saveChangesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveChangesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveChangesButtonMouseReleased(evt);
            }
        });

        saveChangesText.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        saveChangesText.setForeground(new java.awt.Color(255, 255, 255));
        saveChangesText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveChangesText.setText("Save Changes");

        javax.swing.GroupLayout saveChangesButtonLayout = new javax.swing.GroupLayout(saveChangesButton);
        saveChangesButton.setLayout(saveChangesButtonLayout);
        saveChangesButtonLayout.setHorizontalGroup(
            saveChangesButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveChangesButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveChangesText, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );
        saveChangesButtonLayout.setVerticalGroup(
            saveChangesButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saveChangesText, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        resetChangesButton.setBackground(new java.awt.Color(194, 130, 130));
        resetChangesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetChangesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resetChangesButtonMouseReleased(evt);
            }
        });

        resetChangesText.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        resetChangesText.setForeground(new java.awt.Color(255, 255, 255));
        resetChangesText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resetChangesText.setText("Reset Changes");

        javax.swing.GroupLayout resetChangesButtonLayout = new javax.swing.GroupLayout(resetChangesButton);
        resetChangesButton.setLayout(resetChangesButtonLayout);
        resetChangesButtonLayout.setHorizontalGroup(
            resetChangesButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resetChangesButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resetChangesText, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );
        resetChangesButtonLayout.setVerticalGroup(
            resetChangesButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resetChangesText, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jLabel10.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(67, 67, 67));
        jLabel10.setText("Department");

        departmentField.setBackground(new java.awt.Color(255, 255, 255));
        departmentField.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        departmentField.setForeground(new java.awt.Color(67, 67, 67));
        departmentField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout editMyProfileTabLayout = new javax.swing.GroupLayout(editMyProfileTab);
        editMyProfileTab.setLayout(editMyProfileTabLayout);
        editMyProfileTabLayout.setHorizontalGroup(
            editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMyProfileTabLayout.createSequentialGroup()
                .addGap(265, 265, 265)
                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(changePasswordLink)
                    .addGroup(editMyProfileTabLayout.createSequentialGroup()
                        .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(editMyProfileTabLayout.createSequentialGroup()
                        .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editMyProfileTabLayout.createSequentialGroup()
                                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(editMyProfileTabLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(36, 36, 36)
                                        .addComponent(jLabel5))
                                    .addComponent(birthdateField, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(genderField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(resetChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(107, 107, 107)
                        .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)))
                    .addComponent(departmentField, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        editMyProfileTabLayout.setVerticalGroup(
            editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMyProfileTabLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(23, 23, 23)
                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthdateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(30, 30, 30)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(departmentField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(changePasswordLink)
                .addGap(158, 158, 158)
                .addGroup(editMyProfileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resetChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("tab1", editMyProfileTab);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1220, 790));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void courseSelectionPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseSelectionPanelMouseReleased
        // change icon to img11, others become img14, img16, img18, img20 respectively
        // change bg color of panel to (67,67,67), text to (219,219,219) and panel of others to (35,35,35) and text of others to (112,110,110)
        courseSelectionIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img11_courseSelection_selected.png")));
        courseSelectionPanel.setBackground(new java.awt.Color(67, 67, 67));
        courseSelectionText.setForeground(new java.awt.Color(219, 219, 219));

        attendanceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img14_attendance_unselected.png")));
        attendancePanel.setBackground(new java.awt.Color(35, 35, 35));
        attendanceText.setForeground(new java.awt.Color(112, 110, 110));

        tasksIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img16_tasks_unselected.png")));
        tasksPanel.setBackground(new java.awt.Color(35, 35, 35));
        tasksText.setForeground(new java.awt.Color(112, 110, 110));

        studentProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img18_studentProfile_unselected.png")));
        studentProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        studentProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        editMyProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img20_editMyProfile_unselected.png")));
        editMyProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        editMyProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        // headertext changes to Dashboard
        headerText.setText("Course Selection");

        // change index of selected tab to 0
        jTabbedPane1.setSelectedIndex(0);

    }//GEN-LAST:event_courseSelectionPanelMouseReleased

    private void attendancePanelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_attendancePanelKeyReleased
        
    }//GEN-LAST:event_attendancePanelKeyReleased

    private void tasksPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksPanelMouseReleased
        // change icon to img15, others become img12, img14, img18, img20 respectively
        // change bg color of panel to (67,67,67), text to (219,219,219) and panel of others to (35,35,35) and text of others to (112,110,110)
        tasksIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img15_tasks_selected.png")));
        tasksPanel.setBackground(new java.awt.Color(67, 67, 67));
        tasksText.setForeground(new java.awt.Color(219, 219, 219));

        courseSelectionIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img12_courseSelection_unselected.png")));
        courseSelectionPanel.setBackground(new java.awt.Color(35, 35, 35));
        courseSelectionText.setForeground(new java.awt.Color(112, 110, 110));

        attendanceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img14_attendance_unselected.png")));
        attendancePanel.setBackground(new java.awt.Color(35, 35, 35));
        attendanceText.setForeground(new java.awt.Color(112, 110, 110));

        studentProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img18_studentProfile_unselected.png")));
        studentProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        studentProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        editMyProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img20_editMyProfile_unselected.png")));
        editMyProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        editMyProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        // headertext changes to Manage Teachers
        headerText.setText("Tasks");

        // switch to manage teachers panel
        jTabbedPane1.setSelectedIndex(2);
        
    }//GEN-LAST:event_tasksPanelMouseReleased

    private void studentProfilePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentProfilePanelMouseReleased
        // change assign courses icon to img17, others become img12, img14, img16, img20 respectively
        // change bg color of panel to (67,67,67), text to (219,219,219) and panel of others to (35,35,35) and text of others to (112,110,110)
        studentProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img17_studentProfile_selected.png")));
        studentProfilePanel.setBackground(new java.awt.Color(67, 67, 67));
        studentProfileText.setForeground(new java.awt.Color(219, 219, 219));

        courseSelectionIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img12_courseSelection_unselected.png")));
        courseSelectionPanel.setBackground(new java.awt.Color(35, 35, 35));
        courseSelectionText.setForeground(new java.awt.Color(112, 110, 110));

        attendanceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img14_attendance_unselected.png")));
        attendancePanel.setBackground(new java.awt.Color(35, 35, 35));
        attendanceText.setForeground(new java.awt.Color(112, 110, 110));

        tasksIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img16_tasks_unselected.png")));
        tasksPanel.setBackground(new java.awt.Color(35, 35, 35));
        tasksText.setForeground(new java.awt.Color(112, 110, 110));
        
        editMyProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img20_editMyProfile_unselected.png")));
        editMyProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        editMyProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        // headertext changes to Assign Courses
        headerText.setText("Student Profile");

        // switch to assign courses panel
        jTabbedPane1.setSelectedIndex(3);
        
    }//GEN-LAST:event_studentProfilePanelMouseReleased

    private void attendancePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendancePanelMouseReleased
        // change assign courses icon to img13, others become img12, img16, img18, img20 respectively
        // change bg color of panel to (67,67,67), text to (219,219,219) and panel of others to (35,35,35) and text of others to (112,110,110)
        attendanceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img13_attendance_selected.png")));
        attendancePanel.setBackground(new java.awt.Color(67, 67, 67));
        attendanceText.setForeground(new java.awt.Color(219, 219, 219));

        courseSelectionIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img12_courseSelection_unselected.png")));
        courseSelectionPanel.setBackground(new java.awt.Color(35, 35, 35));
        courseSelectionText.setForeground(new java.awt.Color(112, 110, 110));

        tasksIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img16_tasks_unselected.png")));
        tasksPanel.setBackground(new java.awt.Color(35, 35, 35));
        tasksText.setForeground(new java.awt.Color(112, 110, 110));

        studentProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img18_studentProfile_unselected.png")));
        studentProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        studentProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        editMyProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img20_editMyProfile_unselected.png")));
        editMyProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        editMyProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        // headertext changes to Manage Students
        headerText.setText("Attendance");

        // switch to manage students panel
        jTabbedPane1.setSelectedIndex(1);
        
    }//GEN-LAST:event_attendancePanelMouseReleased

    private void signOutPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signOutPanelMouseReleased
        // current user = null, current course = null

        Manager manager = Manager.getInstance();
        
        Login login = new Login();
        login.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_signOutPanelMouseReleased

    private void editMyProfilePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMyProfilePanelMouseReleased
        // change assign courses icon to img19, others become img12, img14, img16, img18 respectively
        // change bg color of panel to (67,67,67), text to (219,219,219) and panel of others to (35,35,35) and text of others to (112,110,110)
        editMyProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img19_editMyProfile_selected.png")));
        editMyProfilePanel.setBackground(new java.awt.Color(67, 67, 67));
        editMyProfileText.setForeground(new java.awt.Color(219, 219, 219));

        courseSelectionIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img12_courseSelection_unselected.png")));
        courseSelectionPanel.setBackground(new java.awt.Color(35, 35, 35));
        courseSelectionText.setForeground(new java.awt.Color(112, 110, 110));

        attendanceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img14_attendance_unselected.png")));
        attendancePanel.setBackground(new java.awt.Color(35, 35, 35));
        attendanceText.setForeground(new java.awt.Color(112, 110, 110));

        tasksIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img16_tasks_unselected.png")));
        tasksPanel.setBackground(new java.awt.Color(35, 35, 35));
        tasksText.setForeground(new java.awt.Color(112, 110, 110));
        
        studentProfileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/img18_studentProfile_unselected.png")));
        studentProfilePanel.setBackground(new java.awt.Color(35, 35, 35));
        studentProfileText.setForeground(new java.awt.Color(112, 110, 110));
        
        
        // headertext changes to Manage Students
        headerText.setText("Edit My Profile");

        // switch to manage students panel
        jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_editMyProfilePanelMouseReleased

    private void changePasswordLinkMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordLinkMouseReleased
        // pass user find by id via userDAO, where id comes from original user to update password
        UserDAO userDAO = null;
        try {
            userDAO = new UserDAO();
        } catch (SQLException ex) {
            Logger.getLogger(StudentDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }

        UpdatePassword updatePassword = new UpdatePassword(userDAO.findById(originalUser.getUserID()));
        updatePassword.setVisible(true);

        // have the currentUser be updated by the id of the currentUser (because the password changed in the database but the user object in manager doesnt show this)

    }//GEN-LAST:event_changePasswordLinkMouseReleased

    private void saveChangesButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveChangesButtonMouseReleased
        // Get user input from the fields
        String name = nameField.getText();
        String email = emailField.getText();
        String birthdateStr = birthdateField.getText();
        String gender = genderField.getText();

        // Input validation
        if (name.trim().isEmpty() || email.trim().isEmpty() || birthdateStr.trim().isEmpty() || gender.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Date birthdate = Date.valueOf(birthdateStr); //Attempt to parse birthdate

            // Confirmation dialog
            int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to save these changes?", "Confirm Changes", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                // Update the user information in the database
                UserDAO userDAO = new UserDAO();
                originalUser.setName(name);
                originalUser.setEmail(email);
                originalUser.setBirthdate(birthdate);
                originalUser.setGender(gender);
                userDAO.update(originalUser); // Update method that takes User object

                JOptionPane.showMessageDialog(this, "Changes saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                // Optionally, refresh the displayed information
                populateFields();
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while saving changes.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveChangesButtonMouseReleased

    private void resetChangesButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetChangesButtonMouseReleased
        // prompts user if they would like to reset
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to reset all changes?", "Confirm Reset", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            // Reset the fields to their original values
            populateFields();
        }

    }//GEN-LAST:event_resetChangesButtonMouseReleased

    private void selectButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectButtonMouseReleased
        int selectedRow = courseSelectionTable.getSelectedRow();
        Manager manager = Manager.getInstance();

        if (selectedRow == -1) {
            // No row selected
            if (manager.getCurrentCourse() != null) {
                // A course is already selected, unselect from the course

                // Unselect mode
                manager.setCurrentCourse(null);
                teacherCourseText.setText("Teacher");
                selectedCourseText.setText("");
                selectButton.setBackground(new java.awt.Color(101, 139, 112));
                selectText.setText("Select");

                // Make the panels invisible
                attendancePanel.setVisible(false);
                tasksPanel.setVisible(false);
                studentProfilePanel.setVisible(false);

                return;
                
            } else {
                JOptionPane.showMessageDialog(this, "Please select a course.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        String selectedCourseCode = (String) courseSelectionTable.getValueAt(selectedRow, 0);
        Course selectedCourse = findCourseByCode(selectedCourseCode);

        if (selectedCourse != null) {
            if (manager.getCurrentCourse() == null || !manager.getCurrentCourse().getCourseCode().equals(selectedCourseCode)) {
                // Select mode
                manager.setCurrentCourse(selectedCourse);
                teacherCourseText.setText("Teacher - " + selectedCourse.getCourseCode() + " (" + selectedCourse.getCourseTitle() + ")");
                selectedCourseText.setText(selectedCourse.getCourseCode() + " - " + selectedCourse.getCourseTitle());
                selectButton.setBackground(new java.awt.Color(112, 110, 110));
                selectText.setText("Unselect");

                // Make the panels visible
                attendancePanel.setVisible(true);
                tasksPanel.setVisible(true);
                studentProfilePanel.setVisible(true);
            } else {
                // Unselect mode
                manager.setCurrentCourse(null);
                teacherCourseText.setText("Teacher");
                selectedCourseText.setText("");
                selectButton.setBackground(new java.awt.Color(101, 139, 112));
                selectText.setText("Select");

                // Make the panels invisible
                attendancePanel.setVisible(false);
                tasksPanel.setVisible(false);
                studentProfilePanel.setVisible(false);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error: Course not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        populateTables();


    }//GEN-LAST:event_selectButtonMouseReleased

    private void courseSelectionTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseSelectionTableMouseReleased
        int selectedRow = courseSelectionTable.getSelectedRow();

        if (selectedRow == -1) {
            // No row selected
            selectButton.setBackground(new java.awt.Color(101, 139, 112));
            selectText.setText("Select");
            return;
        }

        String selectedCourseCode = (String) courseSelectionTable.getValueAt(selectedRow, 0); // Course Code is in the first column

        if (Manager.getInstance().getCurrentCourse() == null || !Manager.getInstance().getCurrentCourse().getCourseCode().equals(selectedCourseCode)) {
            // Different course selected or no course currently selected
            selectButton.setBackground(new java.awt.Color(101, 139, 112));
            selectText.setText("Select");
        } else {
            // Same course selected, unselect
            selectButton.setBackground(new java.awt.Color(112, 110, 110));
            selectText.setText("Unselect");
        }

    }//GEN-LAST:event_courseSelectionTableMouseReleased

    private void attendanceTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendanceTableMouseReleased
        // haha what a joke
    }//GEN-LAST:event_attendanceTableMouseReleased

    private void presentButton_AttendanceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_presentButton_AttendanceMouseReleased
        updateAttendanceStatus(SessionStatus.PRESENT);
    }//GEN-LAST:event_presentButton_AttendanceMouseReleased

    private void lateButton_AttendanceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lateButton_AttendanceMouseReleased
        updateAttendanceStatus(SessionStatus.LATE);
    }//GEN-LAST:event_lateButton_AttendanceMouseReleased

    private void absentButton_AttendanceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_absentButton_AttendanceMouseReleased
        updateAttendanceStatus(SessionStatus.ABSENT);
    }//GEN-LAST:event_absentButton_AttendanceMouseReleased

    private void addASessionButton_AttendanceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addASessionButton_AttendanceMouseReleased
        UpdateSession updateSession = new UpdateSession(Manager.getInstance().getCurrentCourse());
        updateSession.setVisible(true);
        populateAttendanceTable();
    }//GEN-LAST:event_addASessionButton_AttendanceMouseReleased

    private void editASessionButton_AttendanceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editASessionButton_AttendanceMouseReleased
        int selectedRow = attendanceTable.getSelectedRow();
        if (selectedRow != -1) {
            // Row selected, open UpdateSession with no parameters (assumes it uses the selected session)
            // Row selected, get Session ID from the table
            int sessionId = (int) attendanceTable.getValueAt(selectedRow, 0);

            try {
                SessionDAO sessionDAO = new SessionDAO();
                Session session = sessionDAO.findById(sessionId);

                if (session != null && session.getCourseID() == Manager.getInstance().getCurrentCourse().getCourseId()) {
                    UpdateSession updateSession = new UpdateSession(Manager.getInstance().getCurrentCourse(), session); 
                    updateSession.setVisible(true);
                    populateAttendanceTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid Session ID or session not in this course.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Session ID format.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } else {
            // No row selected, prompt for session ID
            String sessionIdStr = JOptionPane.showInputDialog(this, "Enter Session ID to edit:", "Edit Session", JOptionPane.QUESTION_MESSAGE);
            if (sessionIdStr != null && !sessionIdStr.trim().isEmpty()) {
                try {
                    int sessionId = Integer.parseInt(sessionIdStr);
                    SessionDAO sessionDAO = new SessionDAO();
                    Session session = sessionDAO.findById(sessionId);
                    if (session != null && session.getCourseID() == Manager.getInstance().getCurrentCourse().getCourseId()) {
                        UpdateSession updateSession = new UpdateSession(Manager.getInstance().getCurrentCourse(), session); // Pass the course and session
                        updateSession.setVisible(true);
                        populateAttendanceTable();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid Session ID or session not in this course.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid Session ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_editASessionButton_AttendanceMouseReleased

    private void removeASessionButton_AttendanceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeASessionButton_AttendanceMouseReleased
        int selectedRow = attendanceTable.getSelectedRow();
        if (selectedRow != -1) {
            // Row selected, ask for confirmation
            int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this session?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                removeSession((int) attendanceTable.getValueAt(selectedRow, 0));
            }
        } else {
            // No row selected, prompt for session ID
            String sessionIdStr = JOptionPane.showInputDialog(this, "Enter Session ID to remove:", "Remove Session", JOptionPane.QUESTION_MESSAGE);
            if (sessionIdStr != null && !sessionIdStr.trim().isEmpty()) {
                try {
                    int sessionId = Integer.parseInt(sessionIdStr);
                    SessionDAO sessionDAO = new SessionDAO();
                    Session session = sessionDAO.findById(sessionId);
                    if (session != null && session.getCourseID() == Manager.getInstance().getCurrentCourse().getCourseId()) {
                        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove session " + sessionId + "?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
                        if (result == JOptionPane.YES_OPTION) {
                            removeSession(sessionId);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid Session ID or session not in this course.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid Session ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_removeASessionButton_AttendanceMouseReleased

    private void filterBySessionID_AttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySessionID_AttendanceActionPerformed
        filterBySessionIDField_Attendance.setEditable(filterBySessionID_Attendance.isSelected());
        int selectedRow = attendanceTable.getSelectedRow();
        if (selectedRow != -1) {
            int sessionId = (int) attendanceTable.getValueAt(selectedRow, 0);
            filterBySessionIDField_Attendance.setText(String.valueOf(sessionId));
        } else {
            filterBySessionIDField_Attendance.setText(""); // Clear if no row is selected
        }
        populateAttendanceTable();
    }//GEN-LAST:event_filterBySessionID_AttendanceActionPerformed

    private void filterBySessionIDField_AttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySessionIDField_AttendanceActionPerformed
        
    }//GEN-LAST:event_filterBySessionIDField_AttendanceActionPerformed

    private void filterByStudentID_AttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByStudentID_AttendanceActionPerformed
        filterByStudentIDField_Attendance.setEditable(filterByStudentID_Attendance.isSelected());
        int selectedRow = attendanceTable.getSelectedRow();
        if (selectedRow != -1) {
            int studentId = (int) attendanceTable.getValueAt(selectedRow, 3);
            filterByStudentIDField_Attendance.setText(String.valueOf(studentId));
        } else {
            filterByStudentIDField_Attendance.setText(""); // Clear if no row is selected
        }
        populateAttendanceTable();
    }//GEN-LAST:event_filterByStudentID_AttendanceActionPerformed

    private void filterByStudentIDField_AttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByStudentIDField_AttendanceActionPerformed
        
    }//GEN-LAST:event_filterByStudentIDField_AttendanceActionPerformed

    private void filterBySessionIDField_AttendanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterBySessionIDField_AttendanceKeyReleased
        populateAttendanceTable();
    }//GEN-LAST:event_filterBySessionIDField_AttendanceKeyReleased

    private void filterByStudentIDField_AttendanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterByStudentIDField_AttendanceKeyReleased
        populateAttendanceTable();
    }//GEN-LAST:event_filterByStudentIDField_AttendanceKeyReleased

    private void studentProfileTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentProfileTableMouseReleased
        
    }//GEN-LAST:event_studentProfileTableMouseReleased

    private void attendanceTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendanceTable1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_attendanceTable1MouseReleased

    private void addATaskButton_TasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addATaskButton_TasksMouseReleased
        UpdateTask updateTask = new UpdateTask(Manager.getInstance().getCurrentCourse());
        updateTask.setVisible(true);
        populateTasksTable();
    }//GEN-LAST:event_addATaskButton_TasksMouseReleased

    private void editATaskButton_TasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editATaskButton_TasksMouseReleased
        int selectedRow = attendanceTable1.getSelectedRow();
        if (selectedRow != -1) {
            // Row selected, get Task ID from the first column (index 0)
            int taskId = (int) attendanceTable1.getValueAt(selectedRow, 0);

            try {
                TaskDAO taskDAO = new TaskDAO();
                Task task = taskDAO.findById(taskId);

                if (task != null && task.getCourseId() == Manager.getInstance().getCurrentCourse().getCourseId()) {
                    UpdateTask updateTask = new UpdateTask(Manager.getInstance().getCurrentCourse(), task);
                    updateTask.setVisible(true);
                    populateTasksTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid Task ID or task not in this course.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Task ID format.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } else {
            // No row selected, prompt for task ID
            String taskIdStr = JOptionPane.showInputDialog(this, "Enter Task ID to edit:", "Edit Task", JOptionPane.QUESTION_MESSAGE);
            if (taskIdStr != null && !taskIdStr.trim().isEmpty()) {
                try {
                    int taskId = Integer.parseInt(taskIdStr);
                    TaskDAO taskDAO = new TaskDAO();
                    Task task = taskDAO.findById(taskId);
                    if (task != null && task.getCourseId() == Manager.getInstance().getCurrentCourse().getCourseId()) {
                        UpdateTask updateTask = new UpdateTask(Manager.getInstance().getCurrentCourse(), task); // Pass the course and task
                        updateTask.setVisible(true);
                        populateTasksTable();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid Task ID or task not in this course.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid Task ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_editATaskButton_TasksMouseReleased

    private void removeATaskButton_TasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeATaskButton_TasksMouseReleased
        int selectedRow = attendanceTable1.getSelectedRow();
        if (selectedRow != -1) {
            // Row selected, ask for confirmation
            int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this task?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                removeTask((int) attendanceTable1.getValueAt(selectedRow, 0));
            }
        } else {
            // No row selected, prompt for task ID
            String taskIdStr = JOptionPane.showInputDialog(this, "Enter Task ID to remove:", "Remove Task", JOptionPane.QUESTION_MESSAGE);
            if (taskIdStr != null && !taskIdStr.trim().isEmpty()) {
                try {
                    int taskId = Integer.parseInt(taskIdStr);
                    TaskDAO taskDAO = new TaskDAO();
                    Task task = taskDAO.findById(taskId);
                    if (task != null && task.getCourseId() == Manager.getInstance().getCurrentCourse().getCourseId()) {
                        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove task " + taskId + "?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
                        if (result == JOptionPane.YES_OPTION) {
                            removeTask(taskId);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid Task ID or task not in this course.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid Task ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_removeATaskButton_TasksMouseReleased

    private void filterByTaskID_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByTaskID_TasksActionPerformed
        filterByTaskIDField_Tasks.setEditable(filterByTaskID_Tasks.isSelected());
        int selectedRow = attendanceTable1.getSelectedRow();
        if (selectedRow != -1) {
            int taskId = (int) attendanceTable1.getValueAt(selectedRow, 0);
            filterByTaskIDField_Tasks.setText(String.valueOf(taskId));
        } else {
            filterByTaskIDField_Tasks.setText(""); // Clear if no row is selected
        }
        populateTasksTable();

    }//GEN-LAST:event_filterByTaskID_TasksActionPerformed

    private void filterByTaskIDField_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByTaskIDField_TasksActionPerformed
        populateTasksTable();
    }//GEN-LAST:event_filterByTaskIDField_TasksActionPerformed

    private void filterByTaskIDField_TasksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterByTaskIDField_TasksKeyReleased
        populateTasksTable();
    }//GEN-LAST:event_filterByTaskIDField_TasksKeyReleased

    private void filterByStudentID_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByStudentID_TasksActionPerformed
        filterByStudentIDField_Tasks.setEditable(filterByStudentID_Tasks.isSelected());
        int selectedRow = attendanceTable1.getSelectedRow();
        if (selectedRow != -1) {
            int studentId = (int) attendanceTable1.getValueAt(selectedRow, 4);
            filterByStudentIDField_Tasks.setText(String.valueOf(studentId));
        } else {
            filterByStudentIDField_Tasks.setText(""); // Clear if no row is selected
        }
        populateTasksTable();

    }//GEN-LAST:event_filterByStudentID_TasksActionPerformed

    private void filterByStudentIDField_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByStudentIDField_TasksActionPerformed
        populateTasksTable();
    }//GEN-LAST:event_filterByStudentIDField_TasksActionPerformed

    private void filterByStudentIDField_TasksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterByStudentIDField_TasksKeyReleased
        populateTasksTable();
    }//GEN-LAST:event_filterByStudentIDField_TasksKeyReleased

    private void viewSubmissionButton_TasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewSubmissionButton_TasksMouseReleased
        int selectedRow = attendanceTable1.getSelectedRow();
        int submissionId;

        if (selectedRow != -1) {
            submissionId = (int) attendanceTable1.getValueAt(selectedRow, 1); // Get submissionId from the second column (index 1)
        } else {
            String submissionIdStr = JOptionPane.showInputDialog(this, "Enter Submission ID to view:", "View Submission", JOptionPane.QUESTION_MESSAGE);
            if (submissionIdStr == null || submissionIdStr.trim().isEmpty()) {
                return; // User canceled or entered nothing
            }
            try {
                submissionId = Integer.parseInt(submissionIdStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Submission ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        try {
            TaskSubmissionDAO taskSubmissionDAO = new TaskSubmissionDAO();
            TaskSubmission submission = taskSubmissionDAO.findById(submissionId);

            if (submission != null) {
                ViewSubmissionAsTeacher viewSubmission = new ViewSubmissionAsTeacher(submission);
                viewSubmission.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Submission not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        populateTables();
    }//GEN-LAST:event_viewSubmissionButton_TasksMouseReleased

    private void filterByGradeLowerBoundField_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByGradeLowerBoundField_TasksActionPerformed
        populateTasksTable();
    }//GEN-LAST:event_filterByGradeLowerBoundField_TasksActionPerformed

    private void filterByGradeLowerBoundField_TasksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterByGradeLowerBoundField_TasksKeyReleased
        populateTasksTable();
    }//GEN-LAST:event_filterByGradeLowerBoundField_TasksKeyReleased

    private void filterByGrade_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByGrade_TasksActionPerformed
        filterByGradeLowerBoundField_Tasks.setEditable(filterByGrade_Tasks.isSelected());
        filterByGradeUpperBoundField_Tasks.setEditable(filterByGrade_Tasks.isSelected());
        populateTasksTable();
    }//GEN-LAST:event_filterByGrade_TasksActionPerformed

    private void filterByGradeUpperBoundField_TasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByGradeUpperBoundField_TasksActionPerformed
        populateTasksTable();
    }//GEN-LAST:event_filterByGradeUpperBoundField_TasksActionPerformed

    private void filterByGradeUpperBoundField_TasksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterByGradeUpperBoundField_TasksKeyReleased
        populateTasksTable();
    }//GEN-LAST:event_filterByGradeUpperBoundField_TasksKeyReleased

    private void populateFields() {
        if (originalUser != null) {
            fullnameText.setText(originalUser.getName());
            nameField.setText(originalUser.getName());
            emailField.setText(originalUser.getEmail());
            birthdateField.setText(originalUser.getBirthdate().toString());
            genderField.setText(originalUser.getGender());
            departmentField.setText(originalUser.getDepartment());
        } else {
            JOptionPane.showMessageDialog(this, "Error: User not found.", "Error", JOptionPane.ERROR_MESSAGE);
            // Consider closing the dashboard or taking other appropriate action
        }
    }

    private void populateTables() {
        populateCourseSelectionTable();
        populateAttendanceTable();
        populateStudentProfileTable();
        populateTasksTable();
    }

    private void populateCourseSelectionTable() {
        // Get the current user's ID
        int teacherId = originalUser.getUserID();

        // Fetch courses taught by the teacher
        CourseDAO courseDAO = null;
        try {
            courseDAO = new CourseDAO();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error connecting to database.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop execution if database connection fails
        }
        ArrayList<Course> courses = courseDAO.getCoursesByTeacherId(teacherId);

        // Clear existing rows in the table
        DefaultTableModel model = (DefaultTableModel) courseSelectionTable.getModel();
        model.setRowCount(0);

        // Populate the table with course data
        TaskSubmissionDAO taskSubmissionDAO = null;
        StudentSessionDAO studentSessionDAO = null;
        try {
            taskSubmissionDAO = new TaskSubmissionDAO();
            studentSessionDAO = new StudentSessionDAO();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error connecting to database.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop execution if database connection fails
        }
        for (Course course : courses) {
            // Get teachers and rooms for the course
            ArrayList<User> teachers = courseDAO.findTeachersByCourseId(course.getCourseId());
            String teachersString = formatTeacherList(teachers);

            String roomsString = formatRoomList(course.getCourseId());

            // Get average grade and attendance rate
            double averageGrade = taskSubmissionDAO.getAverageGradeForCourse(course.getCourseId());
            double attendanceRate = studentSessionDAO.getAttendanceRateForCourse(course.getCourseId()) * 100;

            // Add row to the table
            Object[] row = {
                    course.getCourseCode(),
                    course.getCourseTitle(),
                    teachersString,
                    roomsString,
                    String.format("%.2f", averageGrade),
                    String.format("%.1f%%", attendanceRate)
            };
            model.addRow(row);
        }
    }

    private void populateAttendanceTable() {
        // Get the currently selected course
        Course currentCourse = Manager.getInstance().getCurrentCourse();
        if (currentCourse == null) {
            DefaultTableModel model = (DefaultTableModel) attendanceTable.getModel();
            model.setRowCount(0); // Clear the table if no course is selected
            return;
        }

        // Fetch attendance data for the selected course
        try {
            SessionDAO sessionDAO = new SessionDAO();
            StudentSessionDAO studentSessionDAO = new StudentSessionDAO();
            ArrayList<Session> sessions = sessionDAO.findByCourseId(currentCourse.getCourseId());

            DefaultTableModel model = (DefaultTableModel) attendanceTable.getModel();
            model.setRowCount(0); // Clear existing rows

            for (Session session : sessions) {
                ArrayList<StudentSession> studentSessions = studentSessionDAO.findBySessionId(session.getSessionID());
                for (StudentSession studentSession : studentSessions) {
                    User student = new UserDAO().findById(studentSession.getStudentID());
                    if (student != null) {
                        // Apply filters here
                        boolean showRow = true;
                        if (filterBySessionID_Attendance.isSelected()) {
                            try {
                                int filterSessionId = Integer.parseInt(filterBySessionIDField_Attendance.getText());
                                showRow = showRow && session.getSessionID() == filterSessionId;
                            } catch (NumberFormatException e) {
                                // Ignore invalid input
                                showRow = false;
                            }
                        }
                        if (filterByStudentID_Attendance.isSelected()) {
                            try {
                                int filterStudentId = Integer.parseInt(filterByStudentIDField_Attendance.getText());
                                showRow = showRow && student.getUserID() == filterStudentId;
                            } catch (NumberFormatException e) {
                                // Ignore invalid input
                                showRow = false;
                            }
                        }

                        if (showRow) {
                            Object[] row = {
                                    session.getSessionID(),
                                    session.getSessionTitle(),
                                    student.getName(),
                                    student.getUserID(),
                                    studentSession.getStatus()
                            };
                            model.addRow(row);
                        }
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error populating attendance table.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void populateStudentProfileTable() {
        // Get the currently selected course
        Course currentCourse = Manager.getInstance().getCurrentCourse();
        if (currentCourse == null) {
            DefaultTableModel model = (DefaultTableModel) studentProfileTable.getModel();
            model.setRowCount(0); // Clear the table if no course is selected
            return;
        }
    
        // Fetch student data for the selected course
        try {
            CourseDAO courseDAO = new CourseDAO();
            TaskSubmissionDAO taskSubmissionDAO = new TaskSubmissionDAO();
            StudentSessionDAO studentSessionDAO = new StudentSessionDAO();
            ArrayList<User> students = courseDAO.findStudentsByCourseId(currentCourse.getCourseId());
    
            DefaultTableModel model = (DefaultTableModel) studentProfileTable.getModel();
            model.setRowCount(0); // Clear existing rows
    
            for (User student : students) {
                // Get average grade and attendance rate for the student in the course
                double averageGrade = taskSubmissionDAO.getAverageGradeForStudentInCourse(student.getUserID(), currentCourse.getCourseId());
                double attendanceRate = studentSessionDAO.getAttendanceRateForStudentInCourse(student.getUserID(), currentCourse.getCourseId()) * 100;
    
                // Add row to the table
                Object[] row = {
                        student.getUserID(),
                        student.getName(),
                        student.getBirthdate(),
                        student.getGender(),
                        student.getEmail(),
                        String.format("%.2f", averageGrade),
                        String.format("%.1f%%", attendanceRate)
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error populating student profile table.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void populateTasksTable() {
        // Get the currently selected course
        Course currentCourse = Manager.getInstance().getCurrentCourse();
        if (currentCourse == null) {
            DefaultTableModel model = (DefaultTableModel) attendanceTable1.getModel();
            model.setRowCount(0); // Clear the table if no course is selected
            return;
        }
    
        // Fetch task data for the selected course
        try {
            TaskSubmissionDAO taskSubmissionDAO = new TaskSubmissionDAO(); // Use TaskSubmissionDAO
            ArrayList<TaskSubmission> submissions = taskSubmissionDAO.findByCourseId(currentCourse.getCourseId()); // Fetch submissions
    
            DefaultTableModel model = (DefaultTableModel) attendanceTable1.getModel();
            model.setRowCount(0); // Clear existing rows
            model.setColumnIdentifiers(new String[]{"Task ID", "Submission ID", "Task Title", "Student Name", "Student ID", "Status", "Grade"}); //Set column headers
    
            for (TaskSubmission submission : submissions) { // Iterate through submissions
                Task task = new TaskDAO().findById(submission.getTaskId()); // Get task details from taskId
                User student = new UserDAO().findById(submission.getStudentId()); // Get student details
                if (student != null && task != null) {
                    // Apply filters here (add your filter logic)
                    boolean showRow = true;
                    // Add filter conditions for Submission ID, Student ID, and Grade here.
    
                    // Filter by Task ID
                    if (filterByTaskID_Tasks.isSelected()) {
                        try {
                            int filterTaskId = Integer.parseInt(filterByTaskIDField_Tasks.getText());
                            showRow = showRow && task.getTaskId() == filterTaskId;
                        } catch (NumberFormatException e) {
                            showRow = false; // Invalid Task ID input
                        }
                    }
    
                    // Filter by Student ID
                    if (filterByStudentID_Tasks.isSelected()) {
                        try {
                            int filterStudentId = Integer.parseInt(filterByStudentIDField_Tasks.getText());
                            showRow = showRow && student.getUserID() == filterStudentId;
                        } catch (NumberFormatException e) {
                            showRow = false; // Invalid Student ID input
                        }
                    }
    
                    // Filter by Grade Range
                    if (filterByGrade_Tasks.isSelected()) {
                        try {
                            int lowerBound = Integer.parseInt(filterByGradeLowerBoundField_Tasks.getText());
                            int upperBound = Integer.parseInt(filterByGradeUpperBoundField_Tasks.getText());
                            // Check if grade is within range and not null
                            showRow = showRow && submission.getSubmissionGrade() != null && submission.getSubmissionGrade() >= lowerBound && submission.getSubmissionGrade() <= upperBound;
                        } catch (NumberFormatException e) {
                            showRow = false; // Invalid grade input
                        }
                    }
    
                    if (showRow) {
                        Object[] row = {
                                task.getTaskId(), // Task ID
                                submission.getSubmissionId(), // Submission ID
                                task.getTaskTitle(),
                                student.getName(),
                                student.getUserID(),
                                submission.getStatus(),
                                submission.getSubmissionGrade()
                        };
                        model.addRow(row);
                    }
                }
            } 
        } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error populating tasks table.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
        }
    }

    // Helper method to format the list of teachers
    private String formatTeacherList(ArrayList<User> teachers) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < teachers.size(); i++) {
            sb.append(teachers.get(i).getName());
            if (i < teachers.size() - 1) {
                sb.append(", ");
            }
        }
        return sb.toString();
    }

    // Helper method to format the list of rooms
    private String formatRoomList(int courseId) {
        CourseDAO courseDAO = null;
        try {
            courseDAO = new CourseDAO();
        } catch (SQLException e) {
            return "Error";
        }
        ArrayList<String> rooms = courseDAO.getRoomsByCourseId(courseId);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rooms.size(); i++) {
            sb.append(rooms.get(i));
            if (i < rooms.size() - 1) {
                sb.append(", ");
            }
        }
        return sb.toString();
    }

    // Helper method to fetch course by ID
    private Course findById(int courseId) {
        CourseDAO courseDAO = null;
        try {
            courseDAO = new CourseDAO();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error connecting to database.", "Error", JOptionPane.ERROR_MESSAGE);
            return null; 
        }
        return courseDAO.findById(courseId);
    }

    private void updateAttendanceStatus(SessionStatus status) {
        int selectedRow = attendanceTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int sessionId = (int) attendanceTable.getValueAt(selectedRow, 0);
        int studentId = (int) attendanceTable.getValueAt(selectedRow, 3);

        try {
            StudentSessionDAO studentSessionDAO = new StudentSessionDAO();
            studentSessionDAO.update(sessionId, studentId, status);
            populateAttendanceTable(); // Refresh the table after update
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating attendance.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        populateTables();
    }

    private Course findCourseByCode(String courseCode) {
        CourseDAO courseDAO;
        try {
            courseDAO = new CourseDAO();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error connecting to database.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return courseDAO.getCourseByCode(courseCode);
    }

    private void removeSession(int sessionId) {
        try {
            SessionDAO sessionDAO = new SessionDAO();
            sessionDAO.delete(sessionId);
            populateAttendanceTable();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error removing session.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void removeTask(int taskId) {
        try {
            TaskDAO taskDAO = new TaskDAO();
            taskDAO.delete(taskId);
            populateTasksTable();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error removing task.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CampusMateLogo;
    private javax.swing.JLabel FilterByGradeTo_Tasks;
    private javax.swing.JPanel absentButton_Attendance;
    private javax.swing.JLabel absentText_Attendance;
    private javax.swing.JPanel addASessionButton_Attendance;
    private javax.swing.JLabel addASessionText_Attendance;
    private javax.swing.JPanel addATaskButton_Tasks;
    private javax.swing.JLabel addATaskText_Tasks;
    private javax.swing.JLabel attendanceIcon;
    private javax.swing.JPanel attendancePanel;
    private javax.swing.JPanel attendanceTab;
    private javax.swing.JTable attendanceTable;
    private javax.swing.JTable attendanceTable1;
    private javax.swing.JLabel attendanceText;
    private javax.swing.JTextField birthdateField;
    private javax.swing.JLabel changePasswordLink;
    private javax.swing.JLabel courseSelectionIcon;
    private javax.swing.JPanel courseSelectionPanel;
    private javax.swing.JPanel courseSelectionTab;
    private javax.swing.JTable courseSelectionTable;
    private javax.swing.JLabel courseSelectionText;
    private javax.swing.JTextField departmentField;
    private javax.swing.JPanel editASessionButton_Attendance;
    private javax.swing.JLabel editASessionText_Attendance;
    private javax.swing.JPanel editATaskButton_Tasks;
    private javax.swing.JLabel editATaskText_Tasks;
    private javax.swing.JLabel editMyProfileIcon;
    private javax.swing.JPanel editMyProfilePanel;
    private javax.swing.JPanel editMyProfileTab;
    private javax.swing.JLabel editMyProfileText;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField filterByGradeLowerBoundField_Tasks;
    private javax.swing.JTextField filterByGradeUpperBoundField_Tasks;
    private javax.swing.JCheckBox filterByGrade_Tasks;
    private javax.swing.JTextField filterBySessionIDField_Attendance;
    private javax.swing.JCheckBox filterBySessionID_Attendance;
    private javax.swing.JTextField filterByStudentIDField_Attendance;
    private javax.swing.JTextField filterByStudentIDField_Tasks;
    private javax.swing.JCheckBox filterByStudentID_Attendance;
    private javax.swing.JCheckBox filterByStudentID_Tasks;
    private javax.swing.JTextField filterByTaskIDField_Tasks;
    private javax.swing.JCheckBox filterByTaskID_Tasks;
    private javax.swing.JLabel fullnameText;
    private javax.swing.JTextField genderField;
    private javax.swing.JPanel headerDivider;
    private javax.swing.JPanel headerPanel1;
    private javax.swing.JLabel headerText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel lateButton_Attendance;
    private javax.swing.JLabel lateText_Attendance;
    private javax.swing.JTextField nameField;
    private javax.swing.JPanel presentButton_Attendance;
    private javax.swing.JLabel presentText_Attendance;
    private javax.swing.JPanel removeASessionButton_Attendance;
    private javax.swing.JLabel removeASessionText_Attendance;
    private javax.swing.JLabel removeASessionText_Attendance2;
    private javax.swing.JPanel removeATaskButton_Tasks;
    private javax.swing.JLabel removeATaskText_Tasks;
    private javax.swing.JPanel resetChangesButton;
    private javax.swing.JLabel resetChangesText;
    private javax.swing.JPanel saveChangesButton;
    private javax.swing.JLabel saveChangesText;
    private javax.swing.JPanel selectButton;
    private javax.swing.JLabel selectText;
    private javax.swing.JLabel selectedCourseText;
    private javax.swing.JLabel selectedCourseTitle;
    private javax.swing.JPanel signOutPanel;
    private javax.swing.JLabel studentProfileIcon;
    private javax.swing.JPanel studentProfilePanel;
    private javax.swing.JPanel studentProfileTab;
    private javax.swing.JTable studentProfileTable;
    private javax.swing.JLabel studentProfileText;
    private javax.swing.JLabel tasksIcon;
    private javax.swing.JPanel tasksPanel;
    private javax.swing.JPanel tasksTab;
    private javax.swing.JLabel tasksText;
    private javax.swing.JLabel teacherCourseText;
    private javax.swing.JPanel viewSubmissionButton_Tasks;
    // End of variables declaration//GEN-END:variables
}
